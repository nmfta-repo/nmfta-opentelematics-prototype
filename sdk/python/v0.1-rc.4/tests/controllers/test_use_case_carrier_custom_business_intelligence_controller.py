# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from opentelematicsapi.api_helper import APIHelper


class UseCaseCarrierCustomBusinessIntelligenceControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(UseCaseCarrierCustomBusinessIntelligenceControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.use_case_carrier_custom_business_intelligence

    # Clients can retrieve a combination of all vehicle information for all vehicles over a given time period.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | ALLOW      |
    def test_get_fleet_vehicle_info_1(self):
        # Parameters for the API call
        start_time = '2019-04-05T02:04:16Z'
        stop_time = '2019-04-05T02:04:16Z'

        # Perform the API call through the SDK function
        result = self.controller.get_fleet_vehicle_info(start_time, stop_time)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "coarseVehicleLocationTimeHistories": {    "data": [      {        "id": "C4CA4238A0B923820DCC509A6F75849B",        "providerId": "api.provider.com",        "serverTime": "2019-04-05T02:04:16Z",        "vehicleId": "21232F297A57A5A743894A0E4A801FC3",        "dateTime": "2019-04-05T02:04:16Z",        "location": "37.4224764 -122.0842499"      }    ],    "timeResolution": "TIMERESOLUTION_NOT_MAX"  },  "flaggedVehicleFaultEvents": [    {      "id": "C4CA4238A0B923820DCC509A6F75849B",      "providerId": "api.provider.com",      "serverTime": "2019-04-05T02:04:16Z",      "vehicleId": "21232F297A57A5A743894A0E4A801FC3",      "location": "37.4224764 -122.0842499",      "eventComment": "event type XXXX, (other details)",      "triggeredDate": "2019-04-05T02:04:16Z",      "clearedDate": "2019-04-05T02:04:16Z",      "occurences": 1,      "messageIdentifier": 128,      "parameterOrSubsystemIdType": "PIDORSID_PID",      "faultCodeParameterorSubsystemId": 0,      "sourceAddress": 0,      "suspectParameterNumber": 0,      "failureModeIdentifier": 0,      "urgentFlag": false,      "odometer": 0,      "engineRpm": 0,      "ecmSpeed": 0,      "cruiseStatus": {        "ccSwitch": false,        "ccSetSwitch": false,        "ccCoastSwitch": false,        "ccClutchSwitch": false,        "ccCruiseSwitch": false,        "ccResumeSwitch": false,        "ccAccelerationSwitch": false,        "ccBrakeSwitch": false,        "ccSpeed": 1      },      "ignitionStatus": {        "ignitionAccessory": false,        "ignitionRunContact": false,        "ignitionCrankContact": false,        "ignitionAidContact": false      },      "gpsQuality": "GPSQUALITY_FINELOCK",      "clearType": "CLEARTYPE_BYSYSTEMS"    }  ],  "vehiclePerformanceEvents": [    {      "id": "C4CA4238A0B923820DCC509A6F75849B",      "providerId": "api.provider.com",      "serverTime": "2019-04-05T02:04:16Z",      "eventStart": "2019-04-05T02:04:16Z",      "eventEnd": "2019-04-05T02:04:16Z",      "vehicleId": "21232F297A57A5A743894A0E4A801FC3",      "eventComment": "performance event type XXXX, (other details)",      "hours": 6.28,      "thresholds": {        "id": "C4CA4238A0B923820DCC509A6F75849B",        "providerId": "api.provider.com",        "serverTime": "2019-04-05T02:04:16Z",        "activeFrom": "2019-04-05T02:04:16Z",        "activeTo": "2019-04-05T02:04:16Z",        "rpmOverValue": 0,        "overSpeedValue": 0,        "excessSpeedValue": 0,        "longIdleValue": 300,        "hiThrottleValue": 0      },      "odometerStart": 0,      "odometerEnd": 0,      "engineTime": 0,      "movingTime": 0,      "startFuel": 0,      "endFuel": 0,      "brakeApplications": 0,      "engineLoadStopped": 0,      "engineLoadMoving": 0,      "headlightTime": 0,      "speedGovernorValue": 0,      "overRpmTime": 0,      "overSpeedTime": 0,      "excessSpeedTime": 0,      "longIdleTime": 0,      "shortIdleTime": 0,      "shortIdleCount": 0,      "longIdleFuel": 0,      "shortIdleFuel": 0,      "cruiseEvents": 0,      "cruiseTime": 0,      "cruiseFuel": 0,      "cruiseDistance": 0,      "topGearValue": 0,      "topGearTime": 0,      "topGearFuel": 0,      "topGearDistance": 0,      "ptoFuel": 0,      "ptoTime": 0,      "seatBeltTime": 0,      "particulateFilterStatus": "`FILTERSTATUS_REGEN_NEEDED\'",      "exhaustFluidLevel": 0,      "overspeedLowThrottle": 0,      "overspeedHiThrottle": 0,      "overrpmLowThrottle": 0,      "overrpmHiThrottle": 0,      "lkaActive": false,      "lkaDisable": false,      "ldwActive": false,      "ldwDisable": false    }  ],  "vehicleFaultCodeEvents": [    {      "id": "C4CA4238A0B923820DCC509A6F75849B",      "providerId": "api.provider.com",      "serverTime": "2019-04-05T02:04:16Z",      "vehicleId": "21232F297A57A5A743894A0E4A801FC3",      "location": "37.4224764 -122.0842499",      "eventComment": "event type XXXX, (other details)",      "triggeredDate": "2019-04-05T02:04:16Z",      "clearedDate": "2019-04-05T02:04:16Z",      "occurences": 1,      "messageIdentifier": 128,      "parameterOrSubsystemIdType": "PIDORSID_PID",      "faultCodeParameterorSubsystemId": 0,      "sourceAddress": 0,      "suspectParameterNumber": 0,      "failureModeIdentifier": 0,      "urgentFlag": false,      "odometer": 0,      "engineRpm": 0,      "ecmSpeed": 0,      "cruiseStatus": {        "ccSwitch": false,        "ccSetSwitch": false,        "ccCoastSwitch": false,        "ccClutchSwitch": false,        "ccCruiseSwitch": false,        "ccResumeSwitch": false,        "ccAccelerationSwitch": false,        "ccBrakeSwitch": false,        "ccSpeed": 1      },      "ignitionStatus": {        "ignitionAccessory": false,        "ignitionRunContact": false,        "ignitionCrankContact": false,        "ignitionAidContact": false      },      "gpsQuality": "GPSQUALITY_FINELOCK",      "clearType": "CLEARTYPE_BYSYSTEMS"    }  ]}', self.response_catcher.response.raw_body)


    # Clients can follow a feed of a combination of all vehicle information for all vehicles as they are added to the TSP
    #system; following is accomplished via polling an endpoint and providing a 'token' which evolves the window of new
    #entries with each query in the polling.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| **DENY**    | ALLOW        | **DENY**   | ALLOW       | **DENY**      | **DENY**   | **DENY**   | ALLOW      |
    def test_follow_fleet_vehicle_info_1(self):
        # Parameters for the API call
        token = '37A6259CC0C1DAE299A7866489DFF0BD'

        # Perform the API call through the SDK function
        result = self.controller.follow_fleet_vehicle_info(token)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "token": "",  "feed": {    "coarseVehicleLocationTimeHistories": {      "data": [        {          "id": "C4CA4238A0B923820DCC509A6F75849B",          "providerId": "api.provider.com",          "serverTime": "2019-04-05T02:04:16Z",          "vehicleId": "21232F297A57A5A743894A0E4A801FC3",          "dateTime": "2019-04-05T02:04:16Z",          "location": "37.4224764 -122.0842499"        }      ],      "timeResolution": "TIMERESOLUTION_NOT_MAX"    },    "flaggedVehicleFaultEvents": [      {        "id": "C4CA4238A0B923820DCC509A6F75849B",        "providerId": "api.provider.com",        "serverTime": "2019-04-05T02:04:16Z",        "vehicleId": "21232F297A57A5A743894A0E4A801FC3",        "location": "37.4224764 -122.0842499",        "eventComment": "event type XXXX, (other details)",        "triggeredDate": "2019-04-05T02:04:16Z",        "clearedDate": "2019-04-05T02:04:16Z",        "occurences": 1,        "messageIdentifier": 128,        "parameterOrSubsystemIdType": "PIDORSID_PID",        "faultCodeParameterorSubsystemId": 0,        "sourceAddress": 0,        "suspectParameterNumber": 0,        "failureModeIdentifier": 0,        "urgentFlag": false,        "odometer": 0,        "engineRpm": 0,        "ecmSpeed": 0,        "cruiseStatus": {          "ccSwitch": false,          "ccSetSwitch": false,          "ccCoastSwitch": false,          "ccClutchSwitch": false,          "ccCruiseSwitch": false,          "ccResumeSwitch": false,          "ccAccelerationSwitch": false,          "ccBrakeSwitch": false,          "ccSpeed": 1        },        "ignitionStatus": {          "ignitionAccessory": false,          "ignitionRunContact": false,          "ignitionCrankContact": false,          "ignitionAidContact": false        },        "gpsQuality": "GPSQUALITY_FINELOCK",        "clearType": "CLEARTYPE_BYSYSTEMS"      }    ],    "vehiclePerformanceEvents": [      {        "id": "C4CA4238A0B923820DCC509A6F75849B",        "providerId": "api.provider.com",        "serverTime": "2019-04-05T02:04:16Z",        "eventStart": "2019-04-05T02:04:16Z",        "eventEnd": "2019-04-05T02:04:16Z",        "vehicleId": "21232F297A57A5A743894A0E4A801FC3",        "eventComment": "performance event type XXXX, (other details)",        "hours": 6.28,        "thresholds": {          "id": "C4CA4238A0B923820DCC509A6F75849B",          "providerId": "api.provider.com",          "serverTime": "2019-04-05T02:04:16Z",          "activeFrom": "2019-04-05T02:04:16Z",          "activeTo": "2019-04-05T02:04:16Z",          "rpmOverValue": 0,          "overSpeedValue": 0,          "excessSpeedValue": 0,          "longIdleValue": 300,          "hiThrottleValue": 0        },        "odometerStart": 0,        "odometerEnd": 0,        "engineTime": 0,        "movingTime": 0,        "startFuel": 0,        "endFuel": 0,        "brakeApplications": 0,        "engineLoadStopped": 0,        "engineLoadMoving": 0,        "headlightTime": 0,        "speedGovernorValue": 0,        "overRpmTime": 0,        "overSpeedTime": 0,        "excessSpeedTime": 0,        "longIdleTime": 0,        "shortIdleTime": 0,        "shortIdleCount": 0,        "longIdleFuel": 0,        "shortIdleFuel": 0,        "cruiseEvents": 0,        "cruiseTime": 0,        "cruiseFuel": 0,        "cruiseDistance": 0,        "topGearValue": 0,        "topGearTime": 0,        "topGearFuel": 0,        "topGearDistance": 0,        "ptoFuel": 0,        "ptoTime": 0,        "seatBeltTime": 0,        "particulateFilterStatus": "`FILTERSTATUS_REGEN_NEEDED\'",        "exhaustFluidLevel": 0,        "overspeedLowThrottle": 0,        "overspeedHiThrottle": 0,        "overrpmLowThrottle": 0,        "overrpmHiThrottle": 0,        "lkaActive": false,        "lkaDisable": false,        "ldwActive": false,        "ldwDisable": false      }    ],    "vehicleFaultCodeEvents": [      {        "id": "C4CA4238A0B923820DCC509A6F75849B",        "providerId": "api.provider.com",        "serverTime": "2019-04-05T02:04:16Z",        "vehicleId": "21232F297A57A5A743894A0E4A801FC3",        "location": "37.4224764 -122.0842499",        "eventComment": "event type XXXX, (other details)",        "triggeredDate": "2019-04-05T02:04:16Z",        "clearedDate": "2019-04-05T02:04:16Z",        "occurences": 1,        "messageIdentifier": 128,        "parameterOrSubsystemIdType": "PIDORSID_PID",        "faultCodeParameterorSubsystemId": 0,        "sourceAddress": 0,        "suspectParameterNumber": 0,        "failureModeIdentifier": 0,        "urgentFlag": false,        "odometer": 0,        "engineRpm": 0,        "ecmSpeed": 0,        "cruiseStatus": {          "ccSwitch": false,          "ccSetSwitch": false,          "ccCoastSwitch": false,          "ccClutchSwitch": false,          "ccCruiseSwitch": false,          "ccResumeSwitch": false,          "ccAccelerationSwitch": false,          "ccBrakeSwitch": false,          "ccSpeed": 1        },        "ignitionStatus": {          "ignitionAccessory": false,          "ignitionRunContact": false,          "ignitionCrankContact": false,          "ignitionAidContact": false        },        "gpsQuality": "GPSQUALITY_FINELOCK",        "clearType": "CLEARTYPE_BYSYSTEMS"      }    ]  }}', self.response_catcher.response.raw_body)


