# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class DriverPerformanceSummary(object):

    """Implementation of the 'Driver Performance Summary' model.

    TODO: type model description here.

    Attributes:
        id (string): The unique identifier for the specific Entity object in
            the system.
        provider_id (string): The unique 'Provider ID' of the TSP
        server_time (string): Date and time when this object was received at
            the TSP
        event_start (string): Date and time of the start of this driver
            performance summary
        event_end (string): Date and time of the end of this driver
            performance summary
        driver_id (string): The id of the driver for this performance summary
        distance (float): the total distance covered during this event, in m
        fuel (float): the total fuel consumed during this event, in litres
        cruise_time (float): the total time spent with cruise control engaged
            during this event, in seconds
        engine_load_percent (float): the average engine load percent during
            this event
        over_rpm_time (float): the total time the driver's vehicles spent
            moving while above rpm threshold, in seconds
        brake_events (float): the number of brake events during this event

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "provider_id":'providerId',
        "server_time":'serverTime',
        "event_start":'eventStart',
        "event_end":'eventEnd',
        "driver_id":'driverId',
        "distance":'distance',
        "fuel":'fuel',
        "cruise_time":'cruiseTime',
        "engine_load_percent":'engineLoadPercent',
        "over_rpm_time":'overRpmTime',
        "brake_events":'brakeEvents'
    }

    def __init__(self,
                 id=None,
                 provider_id=None,
                 server_time=None,
                 event_start=None,
                 event_end=None,
                 driver_id=None,
                 distance=None,
                 fuel=None,
                 cruise_time=None,
                 engine_load_percent=None,
                 over_rpm_time=None,
                 brake_events=None):
        """Constructor for the DriverPerformanceSummary class"""

        # Initialize members of the class
        self.id = id
        self.provider_id = provider_id
        self.server_time = server_time
        self.event_start = event_start
        self.event_end = event_end
        self.driver_id = driver_id
        self.distance = distance
        self.fuel = fuel
        self.cruise_time = cruise_time
        self.engine_load_percent = engine_load_percent
        self.over_rpm_time = over_rpm_time
        self.brake_events = brake_events


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        provider_id = dictionary.get('providerId')
        server_time = dictionary.get('serverTime')
        event_start = dictionary.get('eventStart')
        event_end = dictionary.get('eventEnd')
        driver_id = dictionary.get('driverId')
        distance = dictionary.get('distance')
        fuel = dictionary.get('fuel')
        cruise_time = dictionary.get('cruiseTime')
        engine_load_percent = dictionary.get('engineLoadPercent')
        over_rpm_time = dictionary.get('overRpmTime')
        brake_events = dictionary.get('brakeEvents')

        # Return an object of this model
        return cls(id,
                   provider_id,
                   server_time,
                   event_start,
                   event_end,
                   driver_id,
                   distance,
                   fuel,
                   cruise_time,
                   engine_load_percent,
                   over_rpm_time,
                   brake_events)


