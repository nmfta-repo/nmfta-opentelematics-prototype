# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import opentelematicsapi.models.cruise_status
import opentelematicsapi.models.ignition_status

class VehicleFaultCodeEvent(object):

    """Implementation of the 'Vehicle Fault Code Event' model.

    TODO: type model description here.

    Attributes:
        id (string): The unique identifier for the specific Entity object in
            the system.
        provider_id (string): The unique 'Provider ID' of the TSP
        server_time (string): Date and time when this object was received at
            the TSP
        vehicle_id (string): The vehicle id associated with this event
        location (string): location
        event_comment (string): a free-form comment field. Can be used for
            e.g. identifying the type of event or other unstructured data
        triggered_date (string): Date and time of the fault code being
            triggered
        cleared_date (string): Date and time of the fault code being cleared
        occurences (float): the number of occurences of this fault; OC from
            J1939
        message_identifier (float): MID from SAE J1587 (Not all trucks have
            J1587 encoded networks, so this is not required.)
        parameter_or_subsystem_id_type (ParameterOrSubsystemIdTypeEnum): does
            *faultCodeParameterorSubsystemId* encode a PID or SID as defined
            in SAE J1587?
        fault_code_parameteror_subsystem_id (float): either the PID or SID, as
            in SAE J1587
        source_address (float): SA from SAE J1939
        suspect_parameter_number (float): SPN from SAE J1939
        failure_mode_identifier (float): FMI from SAE J1939
        urgent_flag (bool): is the fault urgent?
        odometer (float): Odometer reading at time of event, in m based on SAE
            J1939 SPN 245, Total Vehicle Distance
        engine_rpm (float): engine RPMs at time of event, in revolutions per
            minute (based on SAE J1939 SPN 190)
        ecm_speed (float): wheel-based vehicle speed of vehicle at time of
            event, in km/h (based on SAE J1939 SPN 84)
        cruise_status (CruiseStatus): TODO: type description here.
        ignition_status (IgnitionStatus): TODO: type description here.
        gps_quality (GPSQualityEnum): TODO: type description here.
        clear_type (ClearTypeEnum): by what means was this fault cleared

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "provider_id":'providerId',
        "server_time":'serverTime',
        "vehicle_id":'vehicleId',
        "location":'location',
        "triggered_date":'triggeredDate',
        "cleared_date":'clearedDate',
        "occurences":'occurences',
        "source_address":'sourceAddress',
        "suspect_parameter_number":'suspectParameterNumber',
        "failure_mode_identifier":'failureModeIdentifier',
        "urgent_flag":'urgentFlag',
        "odometer":'odometer',
        "engine_rpm":'engineRpm',
        "ecm_speed":'ecmSpeed',
        "cruise_status":'cruiseStatus',
        "ignition_status":'ignitionStatus',
        "gps_quality":'gpsQuality',
        "event_comment":'eventComment',
        "message_identifier":'messageIdentifier',
        "parameter_or_subsystem_id_type":'parameterOrSubsystemIdType',
        "fault_code_parameteror_subsystem_id":'faultCodeParameterorSubsystemId',
        "clear_type":'clearType'
    }

    def __init__(self,
                 id=None,
                 provider_id=None,
                 server_time=None,
                 vehicle_id=None,
                 location=None,
                 triggered_date=None,
                 cleared_date=None,
                 occurences=None,
                 source_address=None,
                 suspect_parameter_number=None,
                 failure_mode_identifier=None,
                 urgent_flag=None,
                 odometer=None,
                 engine_rpm=None,
                 ecm_speed=None,
                 cruise_status=None,
                 ignition_status=None,
                 gps_quality=None,
                 event_comment=None,
                 message_identifier=None,
                 parameter_or_subsystem_id_type=None,
                 fault_code_parameteror_subsystem_id=None,
                 clear_type=None):
        """Constructor for the VehicleFaultCodeEvent class"""

        # Initialize members of the class
        self.id = id
        self.provider_id = provider_id
        self.server_time = server_time
        self.vehicle_id = vehicle_id
        self.location = location
        self.event_comment = event_comment
        self.triggered_date = triggered_date
        self.cleared_date = cleared_date
        self.occurences = occurences
        self.message_identifier = message_identifier
        self.parameter_or_subsystem_id_type = parameter_or_subsystem_id_type
        self.fault_code_parameteror_subsystem_id = fault_code_parameteror_subsystem_id
        self.source_address = source_address
        self.suspect_parameter_number = suspect_parameter_number
        self.failure_mode_identifier = failure_mode_identifier
        self.urgent_flag = urgent_flag
        self.odometer = odometer
        self.engine_rpm = engine_rpm
        self.ecm_speed = ecm_speed
        self.cruise_status = cruise_status
        self.ignition_status = ignition_status
        self.gps_quality = gps_quality
        self.clear_type = clear_type


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        provider_id = dictionary.get('providerId')
        server_time = dictionary.get('serverTime')
        vehicle_id = dictionary.get('vehicleId')
        location = dictionary.get('location')
        triggered_date = dictionary.get('triggeredDate')
        cleared_date = dictionary.get('clearedDate')
        occurences = dictionary.get('occurences')
        source_address = dictionary.get('sourceAddress')
        suspect_parameter_number = dictionary.get('suspectParameterNumber')
        failure_mode_identifier = dictionary.get('failureModeIdentifier')
        urgent_flag = dictionary.get('urgentFlag')
        odometer = dictionary.get('odometer')
        engine_rpm = dictionary.get('engineRpm')
        ecm_speed = dictionary.get('ecmSpeed')
        cruise_status = opentelematicsapi.models.cruise_status.CruiseStatus.from_dictionary(dictionary.get('cruiseStatus')) if dictionary.get('cruiseStatus') else None
        ignition_status = opentelematicsapi.models.ignition_status.IgnitionStatus.from_dictionary(dictionary.get('ignitionStatus')) if dictionary.get('ignitionStatus') else None
        gps_quality = dictionary.get('gpsQuality')
        event_comment = dictionary.get('eventComment')
        message_identifier = dictionary.get('messageIdentifier')
        parameter_or_subsystem_id_type = dictionary.get('parameterOrSubsystemIdType')
        fault_code_parameteror_subsystem_id = dictionary.get('faultCodeParameterorSubsystemId')
        clear_type = dictionary.get('clearType')

        # Return an object of this model
        return cls(id,
                   provider_id,
                   server_time,
                   vehicle_id,
                   location,
                   triggered_date,
                   cleared_date,
                   occurences,
                   source_address,
                   suspect_parameter_number,
                   failure_mode_identifier,
                   urgent_flag,
                   odometer,
                   engine_rpm,
                   ecm_speed,
                   cruise_status,
                   ignition_status,
                   gps_quality,
                   event_comment,
                   message_identifier,
                   parameter_or_subsystem_id_type,
                   fault_code_parameteror_subsystem_id,
                   clear_type)


