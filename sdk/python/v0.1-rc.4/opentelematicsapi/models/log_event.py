# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import opentelematicsapi.models.annotation_log
import opentelematicsapi.models.compliance_location

class LogEvent(object):

    """Implementation of the 'Log Event' model.

    TODO: type model description here.

    Attributes:
        id (string): The unique identifier for the specific Entity object in
            the system.
        provider_id (string): The unique 'Provider ID' of the TSP.
        server_time (string): Date and time when this object was received at
            the TSP
        annotations (list of AnnotationLog): The list of AnnotationLog(s)
            which are associated with this log.
        co_drivers (list of string): The list of the co-driver User(s) for
            this log; may only be populated in day end log events
        date_time (string): Date and time from the telematics device
        vehicle_id (string): The vehicle id associated with this log.
        driver_id (string): The id of the driver who created this log.
        distance_last_valid (float): The distance in km traveled since the
            last valid latitude, longitude pair the ELD measured with required
            accuracy in the ELD mandate
        edit_date_time (string): The date and time the log was edited. If the
            log has not been edited, this will not be set.
        location (ComplianceLocation): TODO: type description here.
        origin (OriginEnum): The Origin from where this log originated.
        parent_id (string): The Id of the parent Log Event. Used when a Log
            Event is edited. When returning history, this field will be
            populated.
        sequence (float): The sequence number, which is used to generate the
            sequence ID.
        state (StateEnum): The State of the Log Event record.
        event_type (EventTypeEnum): The type of the Log Event, representing
            the driver's duty status and other states
        certification_count (float): a certification count asssociated with
            driver certification (`EVENTTYPE_CERTIFICATION`) events --
            serialized into ELD Event Code, see ELD 7.20
        verify_date_time (string): The date and time the log was verified. If
            the log is unverified, this will not be set. This is the same as
            log certification. This will be the last certification date.
        multiday_basis (float): Multiday basis (7 or 8) used by the motor
            carrier to compute cumulative duty hours
        comment (string): A textual field that may be populated with
            information pertaining to the creation of an ELD output file
        event_data_checksum (string): The hexidecimal value result of a
            bitwise exclusive OR(XOR) operation using Table 3 of the ELD
            mandate

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "provider_id":'providerId',
        "server_time":'serverTime',
        "date_time":'dateTime',
        "vehicle_id":'vehicleId',
        "driver_id":'driverId',
        "distance_last_valid":'distanceLastValid',
        "location":'location',
        "origin":'origin',
        "sequence":'sequence',
        "state":'state',
        "event_type":'eventType',
        "multiday_basis":'multidayBasis',
        "comment":'comment',
        "event_data_checksum":'eventDataChecksum',
        "annotations":'annotations',
        "co_drivers":'coDrivers',
        "edit_date_time":'editDateTime',
        "parent_id":'parentId',
        "certification_count":'certificationCount',
        "verify_date_time":'verifyDateTime'
    }

    def __init__(self,
                 id=None,
                 provider_id=None,
                 server_time=None,
                 date_time=None,
                 vehicle_id=None,
                 driver_id=None,
                 distance_last_valid=None,
                 location=None,
                 origin=None,
                 sequence=None,
                 state=None,
                 event_type=None,
                 multiday_basis=None,
                 comment=None,
                 event_data_checksum=None,
                 annotations=None,
                 co_drivers=None,
                 edit_date_time=None,
                 parent_id=None,
                 certification_count=None,
                 verify_date_time=None):
        """Constructor for the LogEvent class"""

        # Initialize members of the class
        self.id = id
        self.provider_id = provider_id
        self.server_time = server_time
        self.annotations = annotations
        self.co_drivers = co_drivers
        self.date_time = date_time
        self.vehicle_id = vehicle_id
        self.driver_id = driver_id
        self.distance_last_valid = distance_last_valid
        self.edit_date_time = edit_date_time
        self.location = location
        self.origin = origin
        self.parent_id = parent_id
        self.sequence = sequence
        self.state = state
        self.event_type = event_type
        self.certification_count = certification_count
        self.verify_date_time = verify_date_time
        self.multiday_basis = multiday_basis
        self.comment = comment
        self.event_data_checksum = event_data_checksum


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        provider_id = dictionary.get('providerId')
        server_time = dictionary.get('serverTime')
        date_time = dictionary.get('dateTime')
        vehicle_id = dictionary.get('vehicleId')
        driver_id = dictionary.get('driverId')
        distance_last_valid = dictionary.get('distanceLastValid')
        location = opentelematicsapi.models.compliance_location.ComplianceLocation.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None
        origin = dictionary.get('origin')
        sequence = dictionary.get('sequence')
        state = dictionary.get('state')
        event_type = dictionary.get('eventType')
        multiday_basis = dictionary.get('multidayBasis')
        comment = dictionary.get('comment')
        event_data_checksum = dictionary.get('eventDataChecksum')
        annotations = None
        if dictionary.get('annotations') != None:
            annotations = list()
            for structure in dictionary.get('annotations'):
                annotations.append(opentelematicsapi.models.annotation_log.AnnotationLog.from_dictionary(structure))
        co_drivers = dictionary.get('coDrivers')
        edit_date_time = dictionary.get('editDateTime')
        parent_id = dictionary.get('parentId')
        certification_count = dictionary.get('certificationCount')
        verify_date_time = dictionary.get('verifyDateTime')

        # Return an object of this model
        return cls(id,
                   provider_id,
                   server_time,
                   date_time,
                   vehicle_id,
                   driver_id,
                   distance_last_valid,
                   location,
                   origin,
                   sequence,
                   state,
                   event_type,
                   multiday_basis,
                   comment,
                   event_data_checksum,
                   annotations,
                   co_drivers,
                   edit_date_time,
                   parent_id,
                   certification_count,
                   verify_date_time)


