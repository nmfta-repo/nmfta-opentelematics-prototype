# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Vehicle(object):

    """Implementation of the 'Vehicle' model.

    TODO: type model description here.

    Attributes:
        id (string): The id of this Driver object
        provider_id (string): The unique 'Provider ID' of the TSP
        server_time (string): Date and time when this object was received at
            the TSP
        name (string): Vehicle name
        cmv_vin (string): the CMV VIN
        license_plate (string): the vehicle license plate

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "provider_id":'providerId',
        "server_time":'serverTime',
        "cmv_vin":'cmvVIN',
        "license_plate":'licensePlate',
        "name":'name'
    }

    def __init__(self,
                 id=None,
                 provider_id=None,
                 server_time=None,
                 cmv_vin=None,
                 license_plate=None,
                 name=None):
        """Constructor for the Vehicle class"""

        # Initialize members of the class
        self.id = id
        self.provider_id = provider_id
        self.server_time = server_time
        self.name = name
        self.cmv_vin = cmv_vin
        self.license_plate = license_plate


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        provider_id = dictionary.get('providerId')
        server_time = dictionary.get('serverTime')
        cmv_vin = dictionary.get('cmvVIN')
        license_plate = dictionary.get('licensePlate')
        name = dictionary.get('name')

        # Return an object of this model
        return cls(id,
                   provider_id,
                   server_time,
                   cmv_vin,
                   license_plate,
                   name)


