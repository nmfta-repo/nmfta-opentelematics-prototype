# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import opentelematicsapi.models.stop_geographic_details
import opentelematicsapi.models.performance_thresholds
import opentelematicsapi.models.vehicle
import opentelematicsapi.models.vehicle_location_time_history
import opentelematicsapi.models.vehicle_flagged_event
import opentelematicsapi.models.vehicle_performance_event
import opentelematicsapi.models.vehicle_fault_code_event
import opentelematicsapi.models.state_of_health
import opentelematicsapi.models.driver
import opentelematicsapi.models.annotation_log
import opentelematicsapi.models.log_event
import opentelematicsapi.models.region_specific_break_rules
import opentelematicsapi.models.region_specific_waivers
import opentelematicsapi.models.driver_performance_summary

class VehicleOnlyCompleteTelematicsRecords(object):

    """Implementation of the 'Vehicle Only Complete Telematics Records' model.

    TODO: type model description here.

    Attributes:
        stop_geographic_details (list of StopGeographicDetails): All of the
            Stop Geographic Details objects known to the TSP at the time of
            the request
        performance_thresholds (list of PerformanceThresholds): All of the
            Performance Thresholds objects known to the TSP at the time of the
            request
        vehicles (list of Vehicle): All of the Vehicle objects known to the
            TSP at the time of the request
        vehicle_location_time_histories (VehicleLocationTimeHistory): TODO:
            type description here.
        vehicle_flagged_events (list of VehicleFlaggedEvent): Any of the
            Vehicle Flagged Event objects known to the TSP at the time of the
            request whose associated time periods have an intersection with
            the requested time period
        vehicle_performance_events (list of VehiclePerformanceEvent): Any of
            the Vehicle Performance Event objects known to the TSP at the time
            of the request whose associated time periods have an intersection
            with the requested time period
        flagged_vehicle_fault_events (list of VehicleFaultCodeEvent): Any of
            the Flagged Vehicle Fault Code Event objects known to the TSP at
            the time of the request whose associated time periods have an
            intersection with the requested time period
        vehicle_fault_code_events (list of VehicleFaultCodeEvent): Any of the
            Vehicle Fault Code Event objects known to the TSP at the time of
            the request whose associated time periods have an intersection
            with the requested time period
        state_of_healths (list of StateOfHealth): Any of the State of Health
            objects known to the TSP at the time of the request whose
            associated time periods have an intersection with the requested
            time period

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "stop_geographic_details":'stopGeographicDetails',
        "performance_thresholds":'performanceThresholds',
        "vehicles":'vehicles',
        "vehicle_location_time_histories":'vehicleLocationTimeHistories',
        "vehicle_flagged_events":'vehicleFlaggedEvents',
        "vehicle_performance_events":'vehiclePerformanceEvents',
        "flagged_vehicle_fault_events":'flaggedVehicleFaultEvents',
        "vehicle_fault_code_events":'vehicleFaultCodeEvents',
        "state_of_healths":'stateOfHealths'
    }

    def __init__(self,
                 stop_geographic_details=None,
                 performance_thresholds=None,
                 vehicles=None,
                 vehicle_location_time_histories=None,
                 vehicle_flagged_events=None,
                 vehicle_performance_events=None,
                 flagged_vehicle_fault_events=None,
                 vehicle_fault_code_events=None,
                 state_of_healths=None):
        """Constructor for the VehicleOnlyCompleteTelematicsRecords class"""

        # Initialize members of the class
        self.stop_geographic_details = stop_geographic_details
        self.performance_thresholds = performance_thresholds
        self.vehicles = vehicles
        self.vehicle_location_time_histories = vehicle_location_time_histories
        self.vehicle_flagged_events = vehicle_flagged_events
        self.vehicle_performance_events = vehicle_performance_events
        self.flagged_vehicle_fault_events = flagged_vehicle_fault_events
        self.vehicle_fault_code_events = vehicle_fault_code_events
        self.state_of_healths = state_of_healths


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        stop_geographic_details = None
        if dictionary.get('stopGeographicDetails') != None:
            stop_geographic_details = list()
            for structure in dictionary.get('stopGeographicDetails'):
                stop_geographic_details.append(opentelematicsapi.models.stop_geographic_details.StopGeographicDetails.from_dictionary(structure))
        performance_thresholds = None
        if dictionary.get('performanceThresholds') != None:
            performance_thresholds = list()
            for structure in dictionary.get('performanceThresholds'):
                performance_thresholds.append(opentelematicsapi.models.performance_thresholds.PerformanceThresholds.from_dictionary(structure))
        vehicles = None
        if dictionary.get('vehicles') != None:
            vehicles = list()
            for structure in dictionary.get('vehicles'):
                vehicles.append(opentelematicsapi.models.vehicle.Vehicle.from_dictionary(structure))
        vehicle_location_time_histories = opentelematicsapi.models.vehicle_location_time_history.VehicleLocationTimeHistory.from_dictionary(dictionary.get('vehicleLocationTimeHistories')) if dictionary.get('vehicleLocationTimeHistories') else None
        vehicle_flagged_events = None
        if dictionary.get('vehicleFlaggedEvents') != None:
            vehicle_flagged_events = list()
            for structure in dictionary.get('vehicleFlaggedEvents'):
                vehicle_flagged_events.append(opentelematicsapi.models.vehicle_flagged_event.VehicleFlaggedEvent.from_dictionary(structure))
        vehicle_performance_events = None
        if dictionary.get('vehiclePerformanceEvents') != None:
            vehicle_performance_events = list()
            for structure in dictionary.get('vehiclePerformanceEvents'):
                vehicle_performance_events.append(opentelematicsapi.models.vehicle_performance_event.VehiclePerformanceEvent.from_dictionary(structure))
        flagged_vehicle_fault_events = None
        if dictionary.get('flaggedVehicleFaultEvents') != None:
            flagged_vehicle_fault_events = list()
            for structure in dictionary.get('flaggedVehicleFaultEvents'):
                flagged_vehicle_fault_events.append(opentelematicsapi.models.vehicle_fault_code_event.VehicleFaultCodeEvent.from_dictionary(structure))
        vehicle_fault_code_events = None
        if dictionary.get('vehicleFaultCodeEvents') != None:
            vehicle_fault_code_events = list()
            for structure in dictionary.get('vehicleFaultCodeEvents'):
                vehicle_fault_code_events.append(opentelematicsapi.models.vehicle_fault_code_event.VehicleFaultCodeEvent.from_dictionary(structure))
        state_of_healths = None
        if dictionary.get('stateOfHealths') != None:
            state_of_healths = list()
            for structure in dictionary.get('stateOfHealths'):
                state_of_healths.append(opentelematicsapi.models.state_of_health.StateOfHealth.from_dictionary(structure))

        # Return an object of this model
        return cls(stop_geographic_details,
                   performance_thresholds,
                   vehicles,
                   vehicle_location_time_histories,
                   vehicle_flagged_events,
                   vehicle_performance_events,
                   flagged_vehicle_fault_events,
                   vehicle_fault_code_events,
                   state_of_healths)


class CompleteTelematicsRecords(VehicleOnlyCompleteTelematicsRecords):

    """Implementation of the 'Complete Telematics Records' model.

    TODO: type model description here.
    NOTE: This class inherits from 'VehicleOnlyCompleteTelematicsRecords'.

    Attributes:
        drivers (list of Driver): All of the Driver objects known to the TSP
            at the time of the request
        annotation_logs (list of AnnotationLog): Any of the Annotation Log
            objects known to the TSP at the time of the request whose
            associated time periods have an intersection with the requested
            time period
        log_events (list of LogEvent): Any of the Log Event objects known to
            the TSP at the time of the request whose associated time periods
            have an intersection with the requested time period
        region_specific_break_rules (list of RegionSpecificBreakRules): Any of
            the Region Specific Break Rules objects known to the TSP at the
            time of the request whose associated time periods have an
            intersection with the requested time period
        region_specific_waivers (list of RegionSpecificWaivers): Any of the
            Region Specific Waivers objects known to the TSP at the time of
            the request whose associated time periods have an intersection
            with the requested time period
        driver_performance_summaries (list of DriverPerformanceSummary): Any
            of the Driver Performance Summary objects known to the TSP at the
            time of the request whose associated time periods have an
            intersection with the requested time period

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "drivers":'drivers',
        "annotation_logs":'annotationLogs',
        "log_events":'logEvents',
        "region_specific_break_rules":'regionSpecificBreakRules',
        "region_specific_waivers":'regionSpecificWaivers',
        "driver_performance_summaries":'driverPerformanceSummaries',
        "stop_geographic_details":'stopGeographicDetails',
        "performance_thresholds":'performanceThresholds',
        "vehicles":'vehicles',
        "vehicle_location_time_histories":'vehicleLocationTimeHistories',
        "vehicle_flagged_events":'vehicleFlaggedEvents',
        "vehicle_performance_events":'vehiclePerformanceEvents',
        "flagged_vehicle_fault_events":'flaggedVehicleFaultEvents',
        "vehicle_fault_code_events":'vehicleFaultCodeEvents',
        "state_of_healths":'stateOfHealths'
    }

    def __init__(self,
                 drivers=None,
                 annotation_logs=None,
                 log_events=None,
                 region_specific_break_rules=None,
                 region_specific_waivers=None,
                 driver_performance_summaries=None,
                 stop_geographic_details=None,
                 performance_thresholds=None,
                 vehicles=None,
                 vehicle_location_time_histories=None,
                 vehicle_flagged_events=None,
                 vehicle_performance_events=None,
                 flagged_vehicle_fault_events=None,
                 vehicle_fault_code_events=None,
                 state_of_healths=None):
        """Constructor for the CompleteTelematicsRecords class"""

        # Initialize members of the class
        self.drivers = drivers
        self.annotation_logs = annotation_logs
        self.log_events = log_events
        self.region_specific_break_rules = region_specific_break_rules
        self.region_specific_waivers = region_specific_waivers
        self.driver_performance_summaries = driver_performance_summaries

        # Call the constructor for the base class
        super(CompleteTelematicsRecords, self).__init__(stop_geographic_details,
                                                        performance_thresholds,
                                                        vehicles,
                                                        vehicle_location_time_histories,
                                                        vehicle_flagged_events,
                                                        vehicle_performance_events,
                                                        flagged_vehicle_fault_events,
                                                        vehicle_fault_code_events,
                                                        state_of_healths)


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        drivers = None
        if dictionary.get('drivers') != None:
            drivers = list()
            for structure in dictionary.get('drivers'):
                drivers.append(opentelematicsapi.models.driver.Driver.from_dictionary(structure))
        annotation_logs = None
        if dictionary.get('annotationLogs') != None:
            annotation_logs = list()
            for structure in dictionary.get('annotationLogs'):
                annotation_logs.append(opentelematicsapi.models.annotation_log.AnnotationLog.from_dictionary(structure))
        log_events = None
        if dictionary.get('logEvents') != None:
            log_events = list()
            for structure in dictionary.get('logEvents'):
                log_events.append(opentelematicsapi.models.log_event.LogEvent.from_dictionary(structure))
        region_specific_break_rules = None
        if dictionary.get('regionSpecificBreakRules') != None:
            region_specific_break_rules = list()
            for structure in dictionary.get('regionSpecificBreakRules'):
                region_specific_break_rules.append(opentelematicsapi.models.region_specific_break_rules.RegionSpecificBreakRules.from_dictionary(structure))
        region_specific_waivers = None
        if dictionary.get('regionSpecificWaivers') != None:
            region_specific_waivers = list()
            for structure in dictionary.get('regionSpecificWaivers'):
                region_specific_waivers.append(opentelematicsapi.models.region_specific_waivers.RegionSpecificWaivers.from_dictionary(structure))
        driver_performance_summaries = None
        if dictionary.get('driverPerformanceSummaries') != None:
            driver_performance_summaries = list()
            for structure in dictionary.get('driverPerformanceSummaries'):
                driver_performance_summaries.append(opentelematicsapi.models.driver_performance_summary.DriverPerformanceSummary.from_dictionary(structure))
        stop_geographic_details = None
        if dictionary.get('stopGeographicDetails') != None:
            stop_geographic_details = list()
            for structure in dictionary.get('stopGeographicDetails'):
                stop_geographic_details.append(opentelematicsapi.models.stop_geographic_details.StopGeographicDetails.from_dictionary(structure))
        performance_thresholds = None
        if dictionary.get('performanceThresholds') != None:
            performance_thresholds = list()
            for structure in dictionary.get('performanceThresholds'):
                performance_thresholds.append(opentelematicsapi.models.performance_thresholds.PerformanceThresholds.from_dictionary(structure))
        vehicles = None
        if dictionary.get('vehicles') != None:
            vehicles = list()
            for structure in dictionary.get('vehicles'):
                vehicles.append(opentelematicsapi.models.vehicle.Vehicle.from_dictionary(structure))
        vehicle_location_time_histories = opentelematicsapi.models.vehicle_location_time_history.VehicleLocationTimeHistory.from_dictionary(dictionary.get('vehicleLocationTimeHistories')) if dictionary.get('vehicleLocationTimeHistories') else None
        vehicle_flagged_events = None
        if dictionary.get('vehicleFlaggedEvents') != None:
            vehicle_flagged_events = list()
            for structure in dictionary.get('vehicleFlaggedEvents'):
                vehicle_flagged_events.append(opentelematicsapi.models.vehicle_flagged_event.VehicleFlaggedEvent.from_dictionary(structure))
        vehicle_performance_events = None
        if dictionary.get('vehiclePerformanceEvents') != None:
            vehicle_performance_events = list()
            for structure in dictionary.get('vehiclePerformanceEvents'):
                vehicle_performance_events.append(opentelematicsapi.models.vehicle_performance_event.VehiclePerformanceEvent.from_dictionary(structure))
        flagged_vehicle_fault_events = None
        if dictionary.get('flaggedVehicleFaultEvents') != None:
            flagged_vehicle_fault_events = list()
            for structure in dictionary.get('flaggedVehicleFaultEvents'):
                flagged_vehicle_fault_events.append(opentelematicsapi.models.vehicle_fault_code_event.VehicleFaultCodeEvent.from_dictionary(structure))
        vehicle_fault_code_events = None
        if dictionary.get('vehicleFaultCodeEvents') != None:
            vehicle_fault_code_events = list()
            for structure in dictionary.get('vehicleFaultCodeEvents'):
                vehicle_fault_code_events.append(opentelematicsapi.models.vehicle_fault_code_event.VehicleFaultCodeEvent.from_dictionary(structure))
        state_of_healths = None
        if dictionary.get('stateOfHealths') != None:
            state_of_healths = list()
            for structure in dictionary.get('stateOfHealths'):
                state_of_healths.append(opentelematicsapi.models.state_of_health.StateOfHealth.from_dictionary(structure))

        # Return an object of this model
        return cls(drivers,
                   annotation_logs,
                   log_events,
                   region_specific_break_rules,
                   region_specific_waivers,
                   driver_performance_summaries,
                   stop_geographic_details,
                   performance_thresholds,
                   vehicles,
                   vehicle_location_time_histories,
                   vehicle_flagged_events,
                   vehicle_performance_events,
                   flagged_vehicle_fault_events,
                   vehicle_fault_code_events,
                   state_of_healths)


