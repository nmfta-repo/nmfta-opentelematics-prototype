# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class CruiseStatus(object):

    """Implementation of the 'Cruise Status' model.

    TODO: type model description here.

    Attributes:
        cc_switch (bool): cruise control switch status at time of event
        cc_set_switch (bool): cruise control set switch status at time of
            event
        cc_coast_switch (bool): cruise control coast switch status at time of
            event
        cc_clutch_switch (bool): cruise control clutch switch status at time
            of event
        cc_cruise_switch (bool): cruise control cruise switch status at time
            of event
        cc_resume_switch (bool): cruise control resume switch status at time
            of event
        cc_acceleration_switch (bool): cruise control acceleration switch
            status at time of event
        cc_brake_switch (bool): cruise control brake switch status at time of
            event
        cc_speed (float): cruise control commanded speed at the time of event,
            in km/h

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "cc_switch":'ccSwitch',
        "cc_set_switch":'ccSetSwitch',
        "cc_coast_switch":'ccCoastSwitch',
        "cc_clutch_switch":'ccClutchSwitch',
        "cc_cruise_switch":'ccCruiseSwitch',
        "cc_resume_switch":'ccResumeSwitch',
        "cc_acceleration_switch":'ccAccelerationSwitch',
        "cc_brake_switch":'ccBrakeSwitch',
        "cc_speed":'ccSpeed'
    }

    def __init__(self,
                 cc_switch=None,
                 cc_set_switch=None,
                 cc_coast_switch=None,
                 cc_clutch_switch=None,
                 cc_cruise_switch=None,
                 cc_resume_switch=None,
                 cc_acceleration_switch=None,
                 cc_brake_switch=None,
                 cc_speed=None):
        """Constructor for the CruiseStatus class"""

        # Initialize members of the class
        self.cc_switch = cc_switch
        self.cc_set_switch = cc_set_switch
        self.cc_coast_switch = cc_coast_switch
        self.cc_clutch_switch = cc_clutch_switch
        self.cc_cruise_switch = cc_cruise_switch
        self.cc_resume_switch = cc_resume_switch
        self.cc_acceleration_switch = cc_acceleration_switch
        self.cc_brake_switch = cc_brake_switch
        self.cc_speed = cc_speed


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        cc_switch = dictionary.get('ccSwitch')
        cc_set_switch = dictionary.get('ccSetSwitch')
        cc_coast_switch = dictionary.get('ccCoastSwitch')
        cc_clutch_switch = dictionary.get('ccClutchSwitch')
        cc_cruise_switch = dictionary.get('ccCruiseSwitch')
        cc_resume_switch = dictionary.get('ccResumeSwitch')
        cc_acceleration_switch = dictionary.get('ccAccelerationSwitch')
        cc_brake_switch = dictionary.get('ccBrakeSwitch')
        cc_speed = dictionary.get('ccSpeed')

        # Return an object of this model
        return cls(cc_switch,
                   cc_set_switch,
                   cc_coast_switch,
                   cc_clutch_switch,
                   cc_cruise_switch,
                   cc_resume_switch,
                   cc_acceleration_switch,
                   cc_brake_switch,
                   cc_speed)


