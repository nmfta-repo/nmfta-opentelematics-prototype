# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Driver(object):

    """Implementation of the 'Driver' model.

    TODO: type model description here.

    Attributes:
        id (string): The id of this Driver object
        provider_id (string): The unique 'Provider ID' of the TSP
        server_time (string): Date and time when this object was received at
            the TSP
        username (string): a username of this driver
        driver_license_number (string): the driver's license number
        country (string): short code for the country of the region dictating
            the specific break rules
        region (string): short code for the country's
            region/state/province/territory dictating the specific break
            rules
        driver_home_terminal (string): the home terminal of the driver

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "provider_id":'providerId',
        "server_time":'serverTime',
        "username":'username',
        "driver_license_number":'driverLicenseNumber',
        "country":'country',
        "region":'region',
        "driver_home_terminal":'driverHomeTerminal'
    }

    def __init__(self,
                 id=None,
                 provider_id=None,
                 server_time=None,
                 username=None,
                 driver_license_number=None,
                 country=None,
                 region=None,
                 driver_home_terminal=None):
        """Constructor for the Driver class"""

        # Initialize members of the class
        self.id = id
        self.provider_id = provider_id
        self.server_time = server_time
        self.username = username
        self.driver_license_number = driver_license_number
        self.country = country
        self.region = region
        self.driver_home_terminal = driver_home_terminal


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        provider_id = dictionary.get('providerId')
        server_time = dictionary.get('serverTime')
        username = dictionary.get('username')
        driver_license_number = dictionary.get('driverLicenseNumber')
        country = dictionary.get('country')
        region = dictionary.get('region')
        driver_home_terminal = dictionary.get('driverHomeTerminal')

        # Return an object of this model
        return cls(id,
                   provider_id,
                   server_time,
                   username,
                   driver_license_number,
                   country,
                   region,
                   driver_home_terminal)


