# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.vehicle import Vehicle
from opentelematicsapi.models.driver import Driver
from opentelematicsapi.models.vehicle_location_time import VehicleLocationTime
from opentelematicsapi.models.log_event import LogEvent
from opentelematicsapi.models.region_specific_break_rules import RegionSpecificBreakRules
from opentelematicsapi.models.region_specific_waivers import RegionSpecificWaivers
from opentelematicsapi.models.stop_geographic_details import StopGeographicDetails
from opentelematicsapi.models.vehicle_flagged_event import VehicleFlaggedEvent
from opentelematicsapi.models.vehicle_fault_code_event import VehicleFaultCodeEvent
from opentelematicsapi.models.performance_thresholds import PerformanceThresholds
from opentelematicsapi.models.vehicle_performance_event import VehiclePerformanceEvent
from opentelematicsapi.models.driver_performance_summary import DriverPerformanceSummary
from opentelematicsapi.exceptions.api_exception import APIException

class OpenTelematicsDataModelController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(OpenTelematicsDataModelController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def get_a_vehicle_object_by_its_id(self,
                                       id):
        """Does a GET request to /v1.0/vehicles/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of a Vehicle object

        Returns:
            Vehicle: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_vehicle_object_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_vehicle_object_by_its_id.')
            _url_path = '/v1.0/vehicles/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_vehicle_object_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_vehicle_object_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_vehicle_object_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_vehicle_object_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, Vehicle.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_driver_object_by_its_id(self,
                                      id):
        """Does a GET request to /v1.0/drivers/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of a Driver object

        Returns:
            Driver: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_driver_object_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_driver_object_by_its_id.')
            _url_path = '/v1.0/drivers/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_driver_object_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_driver_object_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_driver_object_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_driver_object_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, Driver.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_vehicle_location_time_by_its_id(self,
                                              id):
        """Does a GET request to /v1.0/fleet/locations/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Vehicle Location Time of interest

        Returns:
            VehicleLocationTime: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_vehicle_location_time_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_vehicle_location_time_by_its_id.')
            _url_path = '/v1.0/fleet/locations/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_vehicle_location_time_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_vehicle_location_time_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_vehicle_location_time_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_vehicle_location_time_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, VehicleLocationTime.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_log_event_by_its_id(self,
                                  id):
        """Does a GET request to /v1.0/event_logs/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Log Event of interest

        Returns:
            LogEvent: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_log_event_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_log_event_by_its_id.')
            _url_path = '/v1.0/event_logs/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_log_event_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_log_event_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_log_event_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_log_event_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, LogEvent.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_region_specific_break_rules_by_its_id(self,
                                                    id):
        """Does a GET request to /v1.0/region_specific_breaks/{id}.

        Rules governing driver brakes for the specific region of governance of
        the driver in question. The rules are defined
        only by the region that is dictating the rules, clients are expected
        to interpret the region to realize specific break
        rules.**Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Region Specific Break Rules of interest

        Returns:
            RegionSpecificBreakRules: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_region_specific_break_rules_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_region_specific_break_rules_by_its_id.')
            _url_path = '/v1.0/region_specific_breaks/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_region_specific_break_rules_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_region_specific_break_rules_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_region_specific_break_rules_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_region_specific_break_rules_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, RegionSpecificBreakRules.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_region_specific_waivers_by_its_id(self,
                                                id):
        """Does a GET request to /v1.0/region_specific_waivers/{id}.

        Waivers and exceptions for the specific region of governance of the
        driver in question. One entity per day of a waiver
        available**Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Region Specific Waivers of interest

        Returns:
            RegionSpecificWaivers: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_region_specific_waivers_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_region_specific_waivers_by_its_id.')
            _url_path = '/v1.0/region_specific_waivers/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_region_specific_waivers_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_region_specific_waivers_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_region_specific_waivers_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_region_specific_waivers_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, RegionSpecificWaivers.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_stop_geographic_details_by_its_id(self,
                                                id):
        """Does a GET request to /v1.0/stops/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Stop Geographic Details of interest

        Returns:
            StopGeographicDetails: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_stop_geographic_details_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_stop_geographic_details_by_its_id.')
            _url_path = '/v1.0/stops/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_stop_geographic_details_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_stop_geographic_details_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_stop_geographic_details_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_stop_geographic_details_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, StopGeographicDetails.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_vehicle_flagged_event_by_its_id(self,
                                              id):
        """Does a GET request to /v1.0/fleet/flagged_events/{id}.

        The purpose of the flagged events is to flag potential saftey issues
        for motor freight carrier staff to validate**Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Vehicle Flagged Event of interest

        Returns:
            VehicleFlaggedEvent: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_vehicle_flagged_event_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_vehicle_flagged_event_by_its_id.')
            _url_path = '/v1.0/fleet/flagged_events/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_vehicle_flagged_event_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_vehicle_flagged_event_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_vehicle_flagged_event_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_vehicle_flagged_event_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, VehicleFlaggedEvent.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_vehicle_fault_code_event_by_its_id(self,
                                                 id):
        """Does a GET request to /v1.0/fleet/faults/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Vehicle Fault Code Event of interest

        Returns:
            VehicleFaultCodeEvent: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_vehicle_fault_code_event_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_vehicle_fault_code_event_by_its_id.')
            _url_path = '/v1.0/fleet/faults/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_vehicle_fault_code_event_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_vehicle_fault_code_event_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_vehicle_fault_code_event_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_vehicle_fault_code_event_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, VehicleFaultCodeEvent.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_flagged_vehicle_fault_code_event_by_its_id(self,
                                                         id):
        """Does a GET request to /v1.0/fleet/flagged_faults/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Flagged Vehicle Fault Code Event of
                interest

        Returns:
            VehicleFaultCodeEvent: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_flagged_vehicle_fault_code_event_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_flagged_vehicle_fault_code_event_by_its_id.')
            _url_path = '/v1.0/fleet/flagged_faults/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_flagged_vehicle_fault_code_event_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_flagged_vehicle_fault_code_event_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_flagged_vehicle_fault_code_event_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_flagged_vehicle_fault_code_event_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, VehicleFaultCodeEvent.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_performance_thresholds_by_its_id(self,
                                               id):
        """Does a GET request to /v1.0/fleet/performance_thresholds/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Performance Thresholds of interest

        Returns:
            PerformanceThresholds: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_performance_thresholds_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_performance_thresholds_by_its_id.')
            _url_path = '/v1.0/fleet/performance_thresholds/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_performance_thresholds_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_performance_thresholds_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_performance_thresholds_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_performance_thresholds_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, PerformanceThresholds.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_vehicle_performance_event_by_its_id(self,
                                                  id):
        """Does a GET request to /v1.0/fleet/performance_events/{id}.

        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            id (string): ID of the Vehicle Performance Event of interest

        Returns:
            VehiclePerformanceEvent: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_vehicle_performance_event_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_vehicle_performance_event_by_its_id.')
            _url_path = '/v1.0/fleet/performance_events/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_vehicle_performance_event_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_vehicle_performance_event_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_vehicle_performance_event_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_vehicle_performance_event_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, VehiclePerformanceEvent.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_a_driver_performance_summary_by_its_id(self,
                                                   id):
        """Does a GET request to /v1.0/driver_performance_summaries/{id}.

        Summary statistics on performance of drivers.**Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | ALLOW      | ALLOW      |

        Args:
            id (string): ID of the Driver Performance Summary of interest

        Returns:
            DriverPerformanceSummary: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_driver_performance_summary_by_its_id called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_driver_performance_summary_by_its_id.')
            _url_path = '/v1.0/driver_performance_summaries/{id}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'id': id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_driver_performance_summary_by_its_id.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_driver_performance_summary_by_its_id.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_driver_performance_summary_by_its_id')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_driver_performance_summary_by_its_id.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, DriverPerformanceSummary.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
