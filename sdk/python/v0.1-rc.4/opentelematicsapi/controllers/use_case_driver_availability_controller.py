# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.get_driver_availability_factors_response import GetDriverAvailabilityFactorsResponse
from opentelematicsapi.models.get_driver_breaks_and_waivers_response import GetDriverBreaksAndWaiversResponse
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseDriverAvailabilityController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseDriverAvailabilityController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def get_driver_availability_factors(self,
                                        driver_id,
                                        start_time,
                                        stop_time):
        """Does a GET request to /v1.0/drivers/{driverId}/availability_factors/.

        Clients can request all the factors contributing to driver
        availability for a given driver, over a given time period.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            driver_id (string): The id of the driver who created this status
                change.
            start_time (string): the start-date of the search
            stop_time (string): the stop-date of the search

        Returns:
            GetDriverAvailabilityFactorsResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_driver_availability_factors called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_driver_availability_factors.')
            _url_path = '/v1.0/drivers/{driverId}/availability_factors/'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'driverId': driver_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_parameters = {
                'startTime': start_time,
                'stopTime': stop_time
            }
            _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
                _query_parameters, Configuration.array_serialization)
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_driver_availability_factors.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_driver_availability_factors.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_driver_availability_factors')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_driver_availability_factors.')
            if _context.response.status_code == 400:
                raise APIException('Error: startTime or stopTime parameters invalid', _context)
            elif _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: driverId Not Found', _context)
            elif _context.response.status_code == 413:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, GetDriverAvailabilityFactorsResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_driver_breaks_and_waivers(self,
                                      driver_id,
                                      start_time,
                                      stop_time):
        """Does a GET request to /v1.0/drivers/{driverId}/breaks_and_waivers/.

        Clients can request any region-specific waivers and break-rules for a
        given driver that are applicable within a given
        time period.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | ALLOW      | ALLOW      |

        Args:
            driver_id (string): The id of the driver who created this status
                change.
            start_time (string): the start-date of the search
            stop_time (string): the stop-date of the search

        Returns:
            GetDriverBreaksAndWaiversResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_driver_breaks_and_waivers called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_driver_breaks_and_waivers.')
            _url_path = '/v1.0/drivers/{driverId}/breaks_and_waivers/'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'driverId': driver_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_parameters = {
                'startTime': start_time,
                'stopTime': stop_time
            }
            _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
                _query_parameters, Configuration.array_serialization)
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_driver_breaks_and_waivers.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_driver_breaks_and_waivers.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_driver_breaks_and_waivers')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_driver_breaks_and_waivers.')
            if _context.response.status_code == 400:
                raise APIException('Error: startTime or stopTime parameters invalid', _context)
            elif _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: driverId Not Found', _context)
            elif _context.response.status_code == 413:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, GetDriverBreaksAndWaiversResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def update_driver_duty_status(self,
                                  driver_id,
                                  body):
        """Does a PATCH request to /v1.0/drivers/{driverId}/duty_status.

        Clients can send custom-integrated duty status changes to the TSP to
        trigger duty status changes for a given driver by pushing data to this
        endpoint.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        **DENY**      | ALLOW      | **DENY**   | ALLOW      |

        Args:
            driver_id (string): The id of the driver who created this status
                change.
            body (ExternallyTriggeredDutyStatusChange): TODO: type description
                here. Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('update_driver_duty_status called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for update_driver_duty_status.')
            _url_path = '/v1.0/drivers/{driverId}/duty_status'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'driverId': driver_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for update_driver_duty_status.')
            _headers = {
                'content-type': 'application/json; charset=utf-8'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for update_driver_duty_status.')
            _request = self.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'update_driver_duty_status')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for update_driver_duty_status.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: driverId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
