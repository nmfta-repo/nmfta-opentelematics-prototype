# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.check_past_30_d_state_of_health_response import CheckPast30dStateOfHealthResponse
from opentelematicsapi.models.state_of_health import StateOfHealth
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseCheckProviderStateOfHealthController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseCheckProviderStateOfHealthController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def check_past_30_d_state_of_health(self):
        """Does a GET request to /v1.0/health/recents.

        Clients can request the recent history of all service statuses. The
        response to this query will return all service
        status records (i.e. those returned via *Check Current State of
        Health*) from over the past 30 days.
        Clients must treat any response other than code 200, code 401, or code
        429 as equivalent to `SERVICESTATUS_MAJOR_OUTAGE`.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        ALLOW         | ALLOW      | ALLOW      | ALLOW      |

        Returns:
            CheckPast30dStateOfHealthResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('check_past_30_d_state_of_health called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for check_past_30_d_state_of_health.')
            _url_path = '/v1.0/health/recents'
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for check_past_30_d_state_of_health.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for check_past_30_d_state_of_health.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'check_past_30_d_state_of_health')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for check_past_30_d_state_of_health.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, CheckPast30dStateOfHealthResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def check_current_state_of_health(self):
        """Does a GET request to /v1.0/health/current.

        Clients can request the current service state of health. The response
        to this query will be a data structure indicating
        everything is good or showing some details as to why the service is
        not presently at 100%.
        Clients must treat any response other than code 200, code 401, or code
        429 as equivalent to `SERVICESTATUS_MAJOR_OUTAGE`.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        ALLOW         | ALLOW      | ALLOW      | ALLOW      |

        Returns:
            StateOfHealth: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('check_current_state_of_health called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for check_current_state_of_health.')
            _url_path = '/v1.0/health/current'
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for check_current_state_of_health.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for check_current_state_of_health.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'check_current_state_of_health')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for check_current_state_of_health.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, StateOfHealth.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
