# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from opentelematicsapi.decorators import lazy_property
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.open_telematics_data_model_controller import OpenTelematicsDataModelController
from opentelematicsapi.controllers.use_case_check_provider_state_of_health_controller import UseCaseCheckProviderStateOfHealthController
from opentelematicsapi.controllers.use_case_data_export_controller import UseCaseDataExportController
from opentelematicsapi.controllers.use_case_driver_availability_controller import UseCaseDriverAvailabilityController
from opentelematicsapi.controllers.use_case_driver_route_directions_communication_controller import UseCaseDriverRouteDirectionsCommunicationController
from opentelematicsapi.controllers.use_case_driver_route_directions_start_controller import UseCaseDriverRouteDirectionsStartController
from opentelematicsapi.controllers.use_case_driver_route_and_directions_done_controller import UseCaseDriverRouteAndDirectionsDoneController
from opentelematicsapi.controllers.use_case_driver_messaging_by_geo_location_controller import UseCaseDriverMessagingByGeoLocationController
from opentelematicsapi.controllers.use_case_vehicle_location_time_history_tracking_controller import UseCaseVehicleLocationTimeHistoryTrackingController
from opentelematicsapi.controllers.use_case_human_resources_process_payroll_controller import UseCaseHumanResourcesProcessPayrollController
from opentelematicsapi.controllers.use_case_carrier_custom_business_intelligence_controller import UseCaseCarrierCustomBusinessIntelligenceController
from opentelematicsapi.controllers.use_case_compliance_and_safety_monitoring_controller import UseCaseComplianceAndSafetyMonitoringController
from opentelematicsapi.controllers.use_case_in_field_maintenance_repair_controller import UseCaseInFieldMaintenanceRepairController
from opentelematicsapi.controllers.localization_controller import LocalizationController


class OpentelematicsapiClient(object):

    config = Configuration

    @lazy_property
    def open_telematics_data_model(self):
        return OpenTelematicsDataModelController()

    @lazy_property
    def use_case_check_provider_state_of_health(self):
        return UseCaseCheckProviderStateOfHealthController()

    @lazy_property
    def use_case_data_export(self):
        return UseCaseDataExportController()

    @lazy_property
    def use_case_driver_availability(self):
        return UseCaseDriverAvailabilityController()

    @lazy_property
    def use_case_driver_route_directions_communication(self):
        return UseCaseDriverRouteDirectionsCommunicationController()

    @lazy_property
    def use_case_driver_route_directions_start(self):
        return UseCaseDriverRouteDirectionsStartController()

    @lazy_property
    def use_case_driver_route_and_directions_done(self):
        return UseCaseDriverRouteAndDirectionsDoneController()

    @lazy_property
    def use_case_driver_messaging_by_geo_location(self):
        return UseCaseDriverMessagingByGeoLocationController()

    @lazy_property
    def use_case_vehicle_location_time_history_tracking(self):
        return UseCaseVehicleLocationTimeHistoryTrackingController()

    @lazy_property
    def use_case_human_resources_process_payroll(self):
        return UseCaseHumanResourcesProcessPayrollController()

    @lazy_property
    def use_case_carrier_custom_business_intelligence(self):
        return UseCaseCarrierCustomBusinessIntelligenceController()

    @lazy_property
    def use_case_compliance_and_safety_monitoring(self):
        return UseCaseComplianceAndSafetyMonitoringController()

    @lazy_property
    def use_case_in_field_maintenance_repair(self):
        return UseCaseInFieldMaintenanceRepairController()

    @lazy_property
    def localization(self):
        return LocalizationController()


    def __init__(self,
                 basic_auth_user_name=None,
                 basic_auth_password=None):
        if basic_auth_user_name is not None:
            Configuration.basic_auth_user_name = basic_auth_user_name
        if basic_auth_password is not None:
            Configuration.basic_auth_password = basic_auth_password

