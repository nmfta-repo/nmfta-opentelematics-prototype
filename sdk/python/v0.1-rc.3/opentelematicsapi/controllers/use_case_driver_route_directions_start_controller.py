# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.vehicle_flagged_event import VehicleFlaggedEvent
from opentelematicsapi.models.create_a_vehicle_route_response import CreateAVehicleRouteResponse
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseDriverRouteDirectionsStartController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseDriverRouteDirectionsStartController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def get_vehicle_flagged_events(self,
                                   vehicle_id,
                                   start_time,
                                   stop_time):
        """Does a GET request to /v1.0/vehicles/{vehicleId}/flagged_events/.

        Clients can retrieve all the flagged vehicle events of a given vehicle
        over a given period of time.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            vehicle_id (string): The vehicle id to associate this route to
            start_time (string): the start-date of the search
            stop_time (string): the stop-date of the search

        Returns:
            VehicleFlaggedEvent: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_vehicle_flagged_events called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_vehicle_flagged_events.')
            _url_path = '/v1.0/vehicles/{vehicleId}/flagged_events/'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'vehicleId': vehicle_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_parameters = {
                'startTime': start_time,
                'stopTime': stop_time
            }
            _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
                _query_parameters, Configuration.array_serialization)
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_vehicle_flagged_events.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_vehicle_flagged_events.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_vehicle_flagged_events')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_vehicle_flagged_events.')
            if _context.response.status_code == 400:
                raise APIException('Error: startTime or stopTime parameters invalid', _context)
            elif _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: vehicleId Not Found', _context)
            elif _context.response.status_code == 413:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, VehicleFlaggedEvent.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def create_a_vehicle_route(self,
                               vehicle_id,
                               body):
        """Does a POST request to /v1.0/vehicles/{vehicleId}/routes.

        Clients can request the creation of a new route for a given vehicle,
        providing start & stop location along with
        additional instructions in a *Externally Sourced Route Start Stop
        Details* object.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        ALLOW         | **DENY**   | **DENY**   | ALLOW      |

        Args:
            vehicle_id (string): The vehicle id to associate this route to
            body (ExternallySourcedRouteStartStopDetails): TODO: type
                description here. Example: 

        Returns:
            CreateAVehicleRouteResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('create_a_vehicle_route called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for create_a_vehicle_route.')
            _url_path = '/v1.0/vehicles/{vehicleId}/routes'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'vehicleId': vehicle_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for create_a_vehicle_route.')
            _headers = {
                'accept': 'application/json',
                'content-type': 'application/json; charset=utf-8'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for create_a_vehicle_route.')
            _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'create_a_vehicle_route')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for create_a_vehicle_route.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: vehicleId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, CreateAVehicleRouteResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
