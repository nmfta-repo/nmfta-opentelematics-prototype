# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.test_if_complete_export_ready_response import TestIfCompleteExportReadyResponse
from opentelematicsapi.models.test_if_vehicle_only_export_ready_response import TestIfVehicleOnlyExportReadyResponse
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseDataExportController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseDataExportController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def test_if_complete_export_ready(self,
                                      day_of):
        """Does a GET request to /v1.0/export/allrecords/status.

        If the file is ready the response will include a URL where the
        complete file can be fetched; if the file is not yet
        ready then a `202` return code will be returned.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | ALLOW      | **DENY**    |
        **DENY**      | **DENY**   | **DENY**   | ALLOW      |

        Args:
            day_of (string): the day of interest, specified by any timestamp
                within that day, including 0000h

        Returns:
            TestIfCompleteExportReadyResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('test_if_complete_export_ready called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for test_if_complete_export_ready.')
            _url_path = '/v1.0/export/allrecords/status'
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_parameters = {
                'dayOf': day_of
            }
            _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
                _query_parameters, Configuration.array_serialization)
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for test_if_complete_export_ready.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for test_if_complete_export_ready.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'test_if_complete_export_ready')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for test_if_complete_export_ready.')
            if _context.response.status_code == 400:
                raise APIException('Error: dayOf parameter invalid', _context)
            elif _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 413:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, TestIfCompleteExportReadyResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def test_if_vehicle_only_export_ready(self,
                                          day_of):
        """Does a GET request to /v1.0/export/vehiclerecords/status.

        If the file is ready the response will include a URL where the
        complete file can be fetched; if the file is not yet
        ready then a `202` return code will be returned.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | **DENY**     | **DENY**   | **DENY**    |
        ALLOW         | **DENY**   | **DENY**   | ALLOW      |

        Args:
            day_of (string): the day of interest, specified by any timestamp
                within that day, including 0000h

        Returns:
            TestIfVehicleOnlyExportReadyResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('test_if_vehicle_only_export_ready called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for test_if_vehicle_only_export_ready.')
            _url_path = '/v1.0/export/vehiclerecords/status'
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_parameters = {
                'dayOf': day_of
            }
            _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
                _query_parameters, Configuration.array_serialization)
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for test_if_vehicle_only_export_ready.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for test_if_vehicle_only_export_ready.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'test_if_vehicle_only_export_ready')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for test_if_vehicle_only_export_ready.')
            if _context.response.status_code == 400:
                raise APIException('Error: dayOf parameter invalid', _context)
            elif _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 413:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, TestIfVehicleOnlyExportReadyResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
