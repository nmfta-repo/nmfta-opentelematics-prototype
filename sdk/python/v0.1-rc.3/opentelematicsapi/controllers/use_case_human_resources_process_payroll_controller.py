# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseHumanResourcesProcessPayrollController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseHumanResourcesProcessPayrollController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def update_driver_info(self,
                           driver_id,
                           body):
        """Does a PATCH request to /v1.0/drivers/{driverId}.

        Clients can request updates to the TSP's managed user accounts for
        drivers by sending data to this endpoint.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        **DENY**      | **DENY**   | ALLOW      | ALLOW      |

        Args:
            driver_id (string): The id of the driver who created this status
                change.
            body (ExternallySourcedDriverInfo): TODO: type description here.
                Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('update_driver_info called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for update_driver_info.')
            _url_path = '/v1.0/drivers/{driverId}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'driverId': driver_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for update_driver_info.')
            _headers = {
                'content-type': 'application/json; charset=utf-8'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for update_driver_info.')
            _request = self.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'update_driver_info')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for update_driver_info.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: driverId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
