# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.get_a_translation_table_response import GetATranslationTableResponse
from opentelematicsapi.exceptions.api_exception import APIException

class LocalizationController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(LocalizationController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def get_a_translation_table(self,
                                accept_language):
        """Does a GET request to /v1.0/i18n.

        Based on [LinguiJS
        formats](https://lingui.js.org/ref/catalog-formats.html); where the
        preferred format is gettext PO
        files, which are closely represented here. Unfortunately the Lingui JS
        raw format and JSON formats cannot be represented
        in API Blueprint's formal spec language.Clients can retrieve the
        current translation table for this TSP's Open Telematics API for given
        language (provided in the request headers.)
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       |
        ALLOW         | ALLOW      | ALLOW      | ALLOW      |

        Args:
            accept_language (string): TODO: type description here. Example: 

        Returns:
            GetATranslationTableResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_a_translation_table called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_a_translation_table.')
            _url_path = '/v1.0/i18n'
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_a_translation_table.')
            _headers = {
                'accept': 'application/json',
                'Accept-Language': accept_language
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_a_translation_table.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_a_translation_table')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_a_translation_table.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 406:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, GetATranslationTableResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
