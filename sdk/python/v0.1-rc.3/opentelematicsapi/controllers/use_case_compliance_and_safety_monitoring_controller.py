# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.get_driver_performance_summaries_response import GetDriverPerformanceSummariesResponse
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseComplianceAndSafetyMonitoringController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseComplianceAndSafetyMonitoringController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def get_driver_performance_summaries(self,
                                         driver_id,
                                         start_time,
                                         stop_time):
        """Does a GET request to /v1.0/drivers/{driverId}/performance_summaries/.

        Clients can request all driver performance summaries for a specific
        driver within a given period of time.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        **DENY**      | **DENY**   | ALLOW      | ALLOW      |

        Args:
            driver_id (string): The id of the driver for performance
                summmaries
            start_time (string): the start-date of the search
            stop_time (string): the stop-date of the search

        Returns:
            GetDriverPerformanceSummariesResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_driver_performance_summaries called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_driver_performance_summaries.')
            _url_path = '/v1.0/drivers/{driverId}/performance_summaries/'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'driverId': driver_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_parameters = {
                'startTime': start_time,
                'stopTime': stop_time
            }
            _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
                _query_parameters, Configuration.array_serialization)
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_driver_performance_summaries.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_driver_performance_summaries.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_driver_performance_summaries')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_driver_performance_summaries.')
            if _context.response.status_code == 400:
                raise APIException('Error: startTime or stopTime parameter invalid', _context)
            elif _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: driverId Not Found', _context)
            elif _context.response.status_code == 413:
                raise APIException('', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, GetDriverPerformanceSummariesResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def update_driver_tsp_portal_account(self,
                                         driver_id,
                                         body):
        """Does a PATCH request to /v1.0/drivers/{driverId}/driverportaluser.

        Clients can request updates to the TSP's portal user accounts for
        drivers by sending data to this endpoint.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        **DENY**      | **DENY**   | ALLOW      | ALLOW      |

        Args:
            driver_id (string): The id of the driver who created this status
                change.
            body (ExternalTSPPortalUserManagement): TODO: type description
                here. Example: 

        Returns:
            void: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('update_driver_tsp_portal_account called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for update_driver_tsp_portal_account.')
            _url_path = '/v1.0/drivers/{driverId}/driverportaluser'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'driverId': driver_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for update_driver_tsp_portal_account.')
            _headers = {
                'content-type': 'application/json; charset=utf-8'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for update_driver_tsp_portal_account.')
            _request = self.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'update_driver_tsp_portal_account')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for update_driver_tsp_portal_account.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: driverId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
