# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import logging
from opentelematicsapi.api_helper import APIHelper
from opentelematicsapi.configuration import Configuration
from opentelematicsapi.controllers.base_controller import BaseController
from opentelematicsapi.http.auth.basic_auth import BasicAuth
from opentelematicsapi.models.update_driver_route_stop_response import UpdateDriverRouteStopResponse
from opentelematicsapi.models.stop_geographic_details import StopGeographicDetails
from opentelematicsapi.models.update_stop_geographic_details_response import UpdateStopGeographicDetailsResponse
from opentelematicsapi.exceptions.api_exception import APIException

class UseCaseDriverRouteDirectionsCommunicationController(BaseController):

    """A Controller to access Endpoints in the opentelematicsapi API."""

    def __init__(self, client=None, call_back=None):
        super(UseCaseDriverRouteDirectionsCommunicationController, self).__init__(client, call_back)
        self.logger = logging.getLogger(__name__)

    def update_driver_route_stop(self,
                                 vehicle_id,
                                 route_id,
                                 body):
        """Does a PUT request to /v1.0/vehicles/{vehicleId}/routes/{routeId}.

        Clients can update a Driver's destination; sending data to this
        endpoint, using a previously obtained `routeId` will
        change the destination of the route, hence also changing the stopId
        associated with the route.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        ALLOW         | **DENY**   | **DENY**   | ALLOW      |

        Args:
            vehicle_id (string): The vehicle id to associate this route to
            route_id (string): the id of the route created, to be used for
                later updates to the route
            body (ExternallySourcedRouteStopDetails): TODO: type description
                here. Example: 

        Returns:
            UpdateDriverRouteStopResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('update_driver_route_stop called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for update_driver_route_stop.')
            _url_path = '/v1.0/vehicles/{vehicleId}/routes/{routeId}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'vehicleId': vehicle_id,
                'routeId': route_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for update_driver_route_stop.')
            _headers = {
                'accept': 'application/json',
                'content-type': 'application/json; charset=utf-8'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for update_driver_route_stop.')
            _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'update_driver_route_stop')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for update_driver_route_stop.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: vehicleId or routeId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, UpdateDriverRouteStopResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def get_stop_geographic_details(self,
                                    stop_id):
        """Does a GET request to /v1.0/stops/{stopId}.

        Clients can retrieve the _geographic details_ of a stop; the *Stop
        Geographic Details* are the specific location for the
        truck and trailer to park and a polygon of geographic points
        indicating the entryway onto a facility (i.e. where the
        truck should drive on approach).
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        ALLOW         | **DENY**   | **DENY**   | ALLOW      |

        Args:
            stop_id (string): The stop id to update

        Returns:
            StopGeographicDetails: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('get_stop_geographic_details called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for get_stop_geographic_details.')
            _url_path = '/v1.0/stops/{stopId}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'stopId': stop_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for get_stop_geographic_details.')
            _headers = {
                'accept': 'application/json'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for get_stop_geographic_details.')
            _request = self.http_client.get(_query_url, headers=_headers)
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'get_stop_geographic_details')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for get_stop_geographic_details.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: stopId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, StopGeographicDetails.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise

    def update_stop_geographic_details(self,
                                       stop_id,
                                       body):
        """Does a PATCH request to /v1.0/stops/{stopId}.

        Clients can update the _geographic details_ of a stop; the *Stop
        Geographic Details* are the specific location for the
        truck and trailer to park and a polygon of geographic points
        indicating the entryway onto a facility (i.e. where the
        truck should drive on approach).
        Sending data to this endpoint, using a previously returned `stopId`
        will update the geograhic details of the stop and
        any other routes using this stop will also be updated.
        **Access Controls**
        |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver
        Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
        |-------|-------------|--------------|------------|-------------|------
        ---------|------------|------------|------------|
        |Access:| **DENY**    | **DENY**     | **DENY**   | **DENY**    |
        ALLOW         | **DENY**   | **DENY**   | ALLOW      |

        Args:
            stop_id (string): The stop id to update
            body (ExternallySourcedStopGeographicDetails): TODO: type
                description here. Example: 

        Returns:
            UpdateStopGeographicDetailsResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """
        try:
            self.logger.info('update_stop_geographic_details called.')
    
            # Prepare query URL
            self.logger.info('Preparing query URL for update_stop_geographic_details.')
            _url_path = '/v1.0/stops/{stopId}'
            _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
                'stopId': stop_id
            })
            _query_builder = Configuration.get_base_uri()
            _query_builder += _url_path
            _query_url = APIHelper.clean_url(_query_builder)
    
            # Prepare headers
            self.logger.info('Preparing headers for update_stop_geographic_details.')
            _headers = {
                'accept': 'application/json',
                'content-type': 'application/json; charset=utf-8'
            }
    
            # Prepare and execute request
            self.logger.info('Preparing and executing request for update_stop_geographic_details.')
            _request = self.http_client.patch(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
            BasicAuth.apply(_request)
            _context = self.execute_request(_request, name = 'update_stop_geographic_details')

            # Endpoint and global error handling using HTTP status codes.
            self.logger.info('Validating response for update_stop_geographic_details.')
            if _context.response.status_code == 401:
                raise APIException('', _context)
            elif _context.response.status_code == 404:
                raise APIException('Error: stopId Not Found', _context)
            elif _context.response.status_code == 429:
                raise APIException('', _context)
            self.validate_response(_context)
    
            # Return appropriate type
            return APIHelper.json_deserialize(_context.response.raw_body, UpdateStopGeographicDetailsResponse.from_dictionary)

        except Exception as e:
            self.logger.error(e, exc_info = True)
            raise
