# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class AnnotationLog(object):

    """Implementation of the 'Annotation Log' model.

    TODO: type model description here.

    Attributes:
        provider_id (string): The unique 'Provider ID' of the TSP.
        driver_id (string): The id of the driver who created this log.
        comment (string): The annotation text associated with the log.
        date_time (string): Date and time for this annotation log

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "provider_id":'providerId',
        "driver_id":'driverId',
        "comment":'comment',
        "date_time":'dateTime'
    }

    def __init__(self,
                 provider_id=None,
                 driver_id=None,
                 comment=None,
                 date_time=None):
        """Constructor for the AnnotationLog class"""

        # Initialize members of the class
        self.provider_id = provider_id
        self.driver_id = driver_id
        self.comment = comment
        self.date_time = date_time


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        provider_id = dictionary.get('providerId')
        driver_id = dictionary.get('driverId')
        comment = dictionary.get('comment')
        date_time = dictionary.get('dateTime')

        # Return an object of this model
        return cls(provider_id,
                   driver_id,
                   comment,
                   date_time)


