# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class IgnitionStatus(object):

    """Implementation of the 'Ignition Status' model.

    TODO: type model description here.

    Attributes:
        ignition_accessory (bool): ignition accessory state at time of event
        ignition_run_contact (bool): ignition run contact state at time of
            event
        ignition_crank_contact (bool): ignition crank contact state at time of
            event
        ignition_aid_contact (bool): ignition aid contact state at time of
            event

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "ignition_accessory":'ignitionAccessory',
        "ignition_run_contact":'ignitionRunContact',
        "ignition_crank_contact":'ignitionCrankContact',
        "ignition_aid_contact":'ignitionAidContact'
    }

    def __init__(self,
                 ignition_accessory=None,
                 ignition_run_contact=None,
                 ignition_crank_contact=None,
                 ignition_aid_contact=None):
        """Constructor for the IgnitionStatus class"""

        # Initialize members of the class
        self.ignition_accessory = ignition_accessory
        self.ignition_run_contact = ignition_run_contact
        self.ignition_crank_contact = ignition_crank_contact
        self.ignition_aid_contact = ignition_aid_contact


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        ignition_accessory = dictionary.get('ignitionAccessory')
        ignition_run_contact = dictionary.get('ignitionRunContact')
        ignition_crank_contact = dictionary.get('ignitionCrankContact')
        ignition_aid_contact = dictionary.get('ignitionAidContact')

        # Return an object of this model
        return cls(ignition_accessory,
                   ignition_run_contact,
                   ignition_crank_contact,
                   ignition_aid_contact)


