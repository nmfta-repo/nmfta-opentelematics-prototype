# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import opentelematicsapi.models.log_event
import opentelematicsapi.models.vehicle_flagged_event
import opentelematicsapi.models.vehicle_location_time_history

class GetDriverAvailabilityFactorsResponse(object):

    """Implementation of the 'Get Driver Availability Factors response' model.

    TODO: type model description here.

    Attributes:
        log_events (list of LogEvent): The Log Events of the requested
            `driverId` for the requested time period [`start`, `stop`)
        vehicle_flagged_events (list of VehicleFlaggedEvent): All Vehicle
            Flagged Events which are associated with the requested `driverId`
            and which occur within the requested time period [`start`,
            `stop`)
        coarse_vehicle_location_time_history (VehicleLocationTimeHistory):
            TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "log_events":'logEvents',
        "vehicle_flagged_events":'vehicleFlaggedEvents',
        "coarse_vehicle_location_time_history":'coarseVehicleLocationTimeHistory'
    }

    def __init__(self,
                 log_events=None,
                 vehicle_flagged_events=None,
                 coarse_vehicle_location_time_history=None):
        """Constructor for the GetDriverAvailabilityFactorsResponse class"""

        # Initialize members of the class
        self.log_events = log_events
        self.vehicle_flagged_events = vehicle_flagged_events
        self.coarse_vehicle_location_time_history = coarse_vehicle_location_time_history


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        log_events = None
        if dictionary.get('logEvents') != None:
            log_events = list()
            for structure in dictionary.get('logEvents'):
                log_events.append(opentelematicsapi.models.log_event.LogEvent.from_dictionary(structure))
        vehicle_flagged_events = None
        if dictionary.get('vehicleFlaggedEvents') != None:
            vehicle_flagged_events = list()
            for structure in dictionary.get('vehicleFlaggedEvents'):
                vehicle_flagged_events.append(opentelematicsapi.models.vehicle_flagged_event.VehicleFlaggedEvent.from_dictionary(structure))
        coarse_vehicle_location_time_history = opentelematicsapi.models.vehicle_location_time_history.VehicleLocationTimeHistory.from_dictionary(dictionary.get('coarseVehicleLocationTimeHistory')) if dictionary.get('coarseVehicleLocationTimeHistory') else None

        # Return an object of this model
        return cls(log_events,
                   vehicle_flagged_events,
                   coarse_vehicle_location_time_history)


