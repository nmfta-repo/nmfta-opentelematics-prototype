# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import opentelematicsapi.models.cruise_status
import opentelematicsapi.models.ignition_status

class VehicleFlaggedEvent(object):

    """Implementation of the 'Vehicle Flagged Event' model.

    TODO: type model description here.

    Attributes:
        id (string): The unique identifier for the specific Entity object in
            the system.
        provider_id (string): The unique 'Provider ID' of the TSP
        server_time (string): Date and time when this object was received at
            the TSP
        event_start (string): Date and time of the start of the event
        event_end (string): Date and time of the end of the event
        vehicle_id (string): The vehicle id associated with this event
        event_comment (string): a free-form comment field. Can be used for
            e.g. identifying the type of event or other unstructured data
        trigger (TriggerEnum): type flagged event
        gps_speed (float): speed of vehicle at time of event, in km/h
        gps_heading (float): heading of vehicle according to GPS at time of
            event, in degrees
        gps_quality (GPSQualityEnum): TODO: type description here.
        ecm_speed (float): wheel-based vehicle speed of vehicle at time of
            event, in km/h (based on SAE J1939 SPN 84)
        engine_rpm (float): engine speed at time of event, in revolutions per
            minute (RPM)
        acceleration_percent (float): vehicle commanded acceleration, in
            percent
        seat_belts (bool): Were seat belts engaged at time of event
        cruise_status (CruiseStatus): TODO: type description here.
        parking_brake (bool): parking brake status at time of event
        ignition_status (IgnitionStatus): TODO: type description here.
        forward_vehicle_speed (float): vehicle speed according to tire
            rotation, in km/h
        forward_vehicle_distance (float): vehicle distance traveled since
            cycled, in m
        forward_vehicle_elapsed (float): vehicle forward travel elapsed time,
            in s
        odometer (float): Odometer reading at time of event, in m based on SAE
            J1939 SPN 245, Total Vehicle Distance

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "provider_id":'providerId',
        "server_time":'serverTime',
        "event_start":'eventStart',
        "event_end":'eventEnd',
        "vehicle_id":'vehicleId',
        "trigger":'trigger',
        "ecm_speed":'ecmSpeed',
        "engine_rpm":'engineRPM',
        "acceleration_percent":'accelerationPercent',
        "ignition_status":'ignitionStatus',
        "forward_vehicle_speed":'forwardVehicleSpeed',
        "forward_vehicle_distance":'forwardVehicleDistance',
        "forward_vehicle_elapsed":'forwardVehicleElapsed',
        "odometer":'odometer',
        "event_comment":'eventComment',
        "gps_speed":'gpsSpeed',
        "gps_heading":'gpsHeading',
        "gps_quality":'gpsQuality',
        "seat_belts":'seatBelts',
        "cruise_status":'cruiseStatus',
        "parking_brake":'parkingBrake'
    }

    def __init__(self,
                 id=None,
                 provider_id=None,
                 server_time=None,
                 event_start=None,
                 event_end=None,
                 vehicle_id=None,
                 trigger=None,
                 ecm_speed=None,
                 engine_rpm=None,
                 acceleration_percent=None,
                 ignition_status=None,
                 forward_vehicle_speed=None,
                 forward_vehicle_distance=None,
                 forward_vehicle_elapsed=None,
                 odometer=None,
                 event_comment=None,
                 gps_speed=None,
                 gps_heading=None,
                 gps_quality=None,
                 seat_belts=None,
                 cruise_status=None,
                 parking_brake=None):
        """Constructor for the VehicleFlaggedEvent class"""

        # Initialize members of the class
        self.id = id
        self.provider_id = provider_id
        self.server_time = server_time
        self.event_start = event_start
        self.event_end = event_end
        self.vehicle_id = vehicle_id
        self.event_comment = event_comment
        self.trigger = trigger
        self.gps_speed = gps_speed
        self.gps_heading = gps_heading
        self.gps_quality = gps_quality
        self.ecm_speed = ecm_speed
        self.engine_rpm = engine_rpm
        self.acceleration_percent = acceleration_percent
        self.seat_belts = seat_belts
        self.cruise_status = cruise_status
        self.parking_brake = parking_brake
        self.ignition_status = ignition_status
        self.forward_vehicle_speed = forward_vehicle_speed
        self.forward_vehicle_distance = forward_vehicle_distance
        self.forward_vehicle_elapsed = forward_vehicle_elapsed
        self.odometer = odometer


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        provider_id = dictionary.get('providerId')
        server_time = dictionary.get('serverTime')
        event_start = dictionary.get('eventStart')
        event_end = dictionary.get('eventEnd')
        vehicle_id = dictionary.get('vehicleId')
        trigger = dictionary.get('trigger')
        ecm_speed = dictionary.get('ecmSpeed')
        engine_rpm = dictionary.get('engineRPM')
        acceleration_percent = dictionary.get('accelerationPercent')
        ignition_status = opentelematicsapi.models.ignition_status.IgnitionStatus.from_dictionary(dictionary.get('ignitionStatus')) if dictionary.get('ignitionStatus') else None
        forward_vehicle_speed = dictionary.get('forwardVehicleSpeed')
        forward_vehicle_distance = dictionary.get('forwardVehicleDistance')
        forward_vehicle_elapsed = dictionary.get('forwardVehicleElapsed')
        odometer = dictionary.get('odometer')
        event_comment = dictionary.get('eventComment')
        gps_speed = dictionary.get('gpsSpeed')
        gps_heading = dictionary.get('gpsHeading')
        gps_quality = dictionary.get('gpsQuality')
        seat_belts = dictionary.get('seatBelts')
        cruise_status = opentelematicsapi.models.cruise_status.CruiseStatus.from_dictionary(dictionary.get('cruiseStatus')) if dictionary.get('cruiseStatus') else None
        parking_brake = dictionary.get('parkingBrake')

        # Return an object of this model
        return cls(id,
                   provider_id,
                   server_time,
                   event_start,
                   event_end,
                   vehicle_id,
                   trigger,
                   ecm_speed,
                   engine_rpm,
                   acceleration_percent,
                   ignition_status,
                   forward_vehicle_speed,
                   forward_vehicle_distance,
                   forward_vehicle_elapsed,
                   odometer,
                   event_comment,
                   gps_speed,
                   gps_heading,
                   gps_quality,
                   seat_belts,
                   cruise_status,
                   parking_brake)


