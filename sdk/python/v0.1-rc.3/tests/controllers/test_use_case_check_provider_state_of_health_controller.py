# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from opentelematicsapi.api_helper import APIHelper


class UseCaseCheckProviderStateOfHealthControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(UseCaseCheckProviderStateOfHealthControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.use_case_check_provider_state_of_health

    # Clients can request the recent history of all service statuses. The response to this query will return all service
    #status records (i.e. those returned via *Check Current State of Health*) from over the past 30 days.
    #
    #Clients must treat any response other than code 200, code 401, or code 429 as equivalent to `SERVICESTATUS_MAJOR_OUTAGE`.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      |
    def test_check_past_30_d_state_of_health_1(self):

        # Perform the API call through the SDK function
        result = self.controller.check_past_30_d_state_of_health()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "data": [    {      "serviceStatus": "SERVICESTATUS_OPERATIONAL",      "dateTime": "2019-04-05T02:04:16Z",      "factors": [        "upstream server operational",        "authentication service operational"      ]    }  ]}', self.response_catcher.response.raw_body)


    # Clients can request the current service state of health. The response to this query will be a data structure indicating
    #everything is good or showing some details as to why the service is not presently at 100%.
    #
    #Clients must treat any response other than code 200, code 401, or code 429 as equivalent to `SERVICESTATUS_MAJOR_OUTAGE`.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | ALLOW         | ALLOW      | ALLOW      | ALLOW      |
    def test_check_current_state_of_health_1(self):

        # Perform the API call through the SDK function
        result = self.controller.check_current_state_of_health()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "serviceStatus": "SERVICESTATUS_OPERATIONAL",  "dateTime": "2019-04-05T02:04:16Z",  "factors": [    "upstream server operational",    "authentication service operational"  ]}', self.response_catcher.response.raw_body)


