# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from opentelematicsapi.api_helper import APIHelper


class UseCaseInFieldMaintenanceRepairControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(UseCaseInFieldMaintenanceRepairControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.use_case_in_field_maintenance_repair

    # Clients can follow a feed of Vehicle Fault Code Events as they are added to the TSP system; following is accomplished
    #bia polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| **DENY**    | ALLOW        | **DENY**   | ALLOW       | **DENY**      | **DENY**   | **DENY**   | ALLOW      |
    def test_follow_fleet_fault_code_events_1(self):
        # Parameters for the API call
        token = '37A6259CC0C1DAE299A7866489DFF0BD'

        # Perform the API call through the SDK function
        result = self.controller.follow_fleet_fault_code_events(token)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "token": "",  "feed": [    {      "id": "C4CA4238A0B923820DCC509A6F75849B",      "providerId": "api.provider.com",      "serverTime": "2019-04-05T02:04:16Z",      "vehicleId": "21232F297A57A5A743894A0E4A801FC3",      "location": "37.4224764 -122.0842499",      "eventComment": "event type XXXX, (other details)",      "triggeredDate": "2019-04-05T02:04:16Z",      "clearedDate": "2019-04-05T02:04:16Z",      "occurences": 1,      "messageIdentifier": 128,      "parameterOrSubsystemIdType": "PIDORSID_PID",      "faultCodeParameterorSubsystemId": 0,      "sourceAddress": 0,      "suspectParameterNumber": 0,      "failureModeIdentifier": 0,      "urgentFlag": false,      "odometer": 0,      "engineRpm": 0,      "ecmSpeed": 0,      "cruiseStatus": {        "ccSwitch": false,        "ccSetSwitch": false,        "ccCoastSwitch": false,        "ccClutchSwitch": false,        "ccCruiseSwitch": false,        "ccResumeSwitch": false,        "ccAccelerationSwitch": false,        "ccBrakeSwitch": false,        "ccSpeed": 1      },      "ignitionStatus": {        "ignitionAccessory": false,        "ignitionRunContact": false,        "ignitionCrankContact": false,        "ignitionAidContact": false      },      "gpsQuality": "GPSQUALITY_FINELOCK",      "clearType": "CLEARTYPE_BYSYSTEMS"    }  ]}', self.response_catcher.response.raw_body)


    # **Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | ALLOW      |
    def test_get_vehicle_location_history_1(self):
        # Parameters for the API call
        vehicle_id = '21232F297A57A5A743894A0E4A801FC3'
        start_time = '2019-04-05T02:04:16Z'
        stop_time = '2019-04-05T02:04:16Z'

        # Perform the API call through the SDK function
        result = self.controller.get_vehicle_location_history(vehicle_id, start_time, stop_time)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "data": [    {      "id": "C4CA4238A0B923820DCC509A6F75849B",      "providerId": "api.provider.com",      "serverTime": "2019-04-05T02:04:16Z",      "vehicleId": "21232F297A57A5A743894A0E4A801FC3",      "dateTime": "2019-04-05T02:04:16Z",      "location": "37.4224764 -122.0842499"    }  ],  "timeResolution": "TIMERESOLUTION_MAX"}', self.response_catcher.response.raw_body)


