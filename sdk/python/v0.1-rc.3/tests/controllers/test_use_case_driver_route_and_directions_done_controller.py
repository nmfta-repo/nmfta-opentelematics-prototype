# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from opentelematicsapi.api_helper import APIHelper


class UseCaseDriverRouteAndDirectionsDoneControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(UseCaseDriverRouteAndDirectionsDoneControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.use_case_driver_route_and_directions_done

    # Clients can follow a feed of Log Event entries as they are added to the TSP system; following is accomplished via
    #polling an endpoint and providing a 'token' which evolves the window of new entries with each query in the polling.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| **DENY**    | **DENY**     | **DENY**   | ALLOW       | ALLOW         | **DENY**   |    ALLOW   | ALLOW      |
    def test_follow_fleet_log_events_1(self):
        # Parameters for the API call
        token = '37A6259CC0C1DAE299A7866489DFF0BD'

        # Perform the API call through the SDK function
        result = self.controller.follow_fleet_log_events(token)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "token": "",  "feed": [    {      "id": "C4CA4238A0B923820DCC509A6F75849B",      "providerId": "api.provider.com",      "serverTime": "2019-04-05T02:04:16Z",      "annotations": [        {          "providerId": "api.provider.com",          "driverId": "63A9F0EA7BB98050796B649E85481845",          "comment": "note: something noteworthy",          "dateTime": "2019-04-05T02:04:16Z"        }      ],      "coDrivers": [        "A87FF679A2F3E71D9181A67B7542122C",        "E4DA3B7FBBCE2345D7772B0674A318D5"      ],      "dateTime": "2019-04-05T02:04:16Z",      "vehicleId": "21232F297A57A5A743894A0E4A801FC3",      "driverId": "63A9F0EA7BB98050796B649E85481845",      "distanceLastValid": 117,      "editDateTime": "",      "location": {        "latitude": 37.4224764,        "longitude": -122.0842499,        "identifiedPlace": "New York",        "identifiedState": "NY",        "distanceFrom": 5000,        "directionFrom": "NNE"      },      "origin": "ORIGIN_AUTOMATIC",      "parentId": "D6AB4B1A2E51C28CB32BFE8982D42259",      "sequence": 23,      "state": "STATE_ACTIVE",      "eventType": "EVENTTYPE_DUTY_OFF",      "certificationCount": 0,      "verifyDateTime": "",      "multidayBasis": 0,      "comment": "fake Log Event for testing",      "eventDataChecksum": ""    }  ]}', self.response_catcher.response.raw_body)


