# -*- coding: utf-8 -*-

"""
    opentelematicsapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from opentelematicsapi.api_helper import APIHelper


class UseCaseDriverRouteDirectionsStartControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(UseCaseDriverRouteDirectionsStartControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.use_case_driver_route_directions_start

    # Clients can retrieve all the flagged vehicle events of a given vehicle over a given period of time.
    #
    #**Access Controls**
    #
    #|Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       |
    #|-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------|
    #|Access:| ALLOW       | ALLOW        | ALLOW      | ALLOW       | **DENY**      | **DENY**   | **DENY**   | ALLOW      |
    def test_get_vehicle_flagged_events_1(self):
        # Parameters for the API call
        vehicle_id = '21232F297A57A5A743894A0E4A801FC3'
        start_time = '2019-04-05T02:04:16Z'
        stop_time = '2019-04-05T02:04:16Z'

        # Perform the API call through the SDK function
        result = self.controller.get_vehicle_flagged_events(vehicle_id, start_time, stop_time)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "id": "C4CA4238A0B923820DCC509A6F75849B",  "providerId": "api.provider.com",  "serverTime": "2019-04-05T02:04:16Z",  "eventStart": "2019-04-05T02:04:16Z",  "eventEnd": "2019-04-05T02:04:16Z",  "vehicleId": "21232F297A57A5A743894A0E4A801FC3",  "eventComment": "event type XXXX, (other details)",  "trigger": "FLAGGEDTYPE_ROLL_STABILITY",  "gpsSpeed": 0,  "gpsHeading": 0,  "gpsQuality": "GPSQUALITY_FINELOCK",  "ecmSpeed": 0,  "engineRPM": 0,  "accelerationPercent": 0,  "seatBelts": true,  "cruiseStatus": {    "ccSwitch": false,    "ccSetSwitch": false,    "ccCoastSwitch": false,    "ccClutchSwitch": false,    "ccCruiseSwitch": false,    "ccResumeSwitch": false,    "ccAccelerationSwitch": false,    "ccBrakeSwitch": false,    "ccSpeed": 1  },  "parkingBrake": false,  "ignitionStatus": {    "ignitionAccessory": false,    "ignitionRunContact": false,    "ignitionCrankContact": false,    "ignitionAidContact": false  },  "forwardVehicleSpeed": 1,  "forwardVehicleDistance": 100,  "forwardVehicleElapsed": 2,  "odometer": 0}', self.response_catcher.response.raw_body)


