from setuptools import setup, find_packages

# Try to convert markdown README to rst format for PyPI.
try:
    import pypandoc
    long_description = pypandoc.convert('README.md', 'rst')
except(IOError, ImportError):
    long_description = open('README.md').read()

setup(
    name='opentelematicsapi',
    version='0.1.0rc3',
    description='A project to enable business resiliency for motor freight carriers with tight integrations into Telematics Service Providers (TSPs).  ![NMFTA Logo](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/image1.png)  This document is written using [api-blueprint](https://apiblueprint.org/) and available online at both [opentelematicsapi.docs.apiary.io](https://opentelematicsapi.docs.apiary.io/#) (for browsable document) and https://github.com/nmfta-repo/nmfta-opentelematics-api for the API blueprint source. Please use https://github.com /nmfta-repo/nmfta-opentelematics-api to raise issues and suggest changes to the API.  If a telematics system provider (TSP) suddenly goes out of business (have had two examples of this in 2018) any commercial fleet relying on their service will need to find a new provider. Due to the lack of a standardized telematics data format, a commercial fleet manager will have to reintegrate an alternate telematics provider\'s data format into their existing system reporting.  The Open Telematics API (OTAPI) is intended to make the TSP-Carrier interface the same across multiple TSPs. It is not intended to specify any aspects of the TSP\'s connections to their telematics devices. Neither does it imply any changes to the location where data is stored or access controls on the data -- the data will still live at the Motor Freight Carrier as-sourced from their accounts at the TSP.  ![NMFTA Logo](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/overview.png)  This is a standardized API for retrieving telematics logs & data. Each participating TSP would be individually responsible for the necessary translations from their existing formats to this Open Telematics API. Each TSP would continue to be responsible for managing their own cloud infrastructure housing customer data. The Open Telematics API, as an additional interface, will be made available by TSPs to allow their customers ready access to pull data in the standardized format, especially in examples of mixed TSP fleets.  # Contributors  This Open Telematics API was made possible through the generous contributions of thought leadership and technical expertise of many collaborators across the heavy vehicle cyber security community, working to push the industry forward and make it more resilient. Though some of our contributors wish to remain anonymous, we are deeply grateful to everyone who has given their time and energy to make this a reality.  | **Fleet Managers** | **Telematics Providers** | **Independents** | |:------------------:|:------------------------:|:----------------:| |Bill Brown, SEFL | Geotab | Altaz Valani, Security Compass | | | Samsara Networks, Inc.| Stephen Raio, U.S. Army Combat Capabilities Development Command | | | | Andrew Smith, ISE Inc. | | | | Dr. Jeremy Daily, UTulsa |  ![SEFL](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/SFL2c_300dpi-resized.jpg) ![Geotab](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/geotab-logo_full-colour-rgb_resized.png) ![Samsara Networks Inc.](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/samsara_horizontal_logo_black-resized.jpg) ![Security Compass](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/securitycompass-logo-resized.jpg) ![ISE Inc.](https://raw.githubusercontent.com/nmfta-repo/nmfta-opentelematics-api/master/media/ISE_A_Trimble_Company_RGB.png)  # Authentication  **All requests** to Open Telematics API endpoints **require authentication**.  For this version of the API, `v1`, all authentication must be performed using HTTP Basic. e.g.  ```http Authorization: Basic YWRtaW46YWRtaW4= ```  This authentication method relies entirely on the security protections provided by the TLS layer; therefore HTTPS is mandatory on all connections and implementors must follow adhere to the security requirements detailed in the *Security Requirements for Implementors* section below.  TSPs implementing the Open Telematics API must provide a means to create username-password pair credentials and these must be associated with roles (see section *Authorization* below).  # Authorization  TSPs implementing the Open Telematics API must include access controls for requests against the following roles.  * *Vehicle Query*  * *Vehicle Follow*  * *Driver Query*  * *Driver Follow*  * *Driver Dispatch*  * *Driver Duty*  * *HR*  * *Admin*  It must be possible for clients to usernames for Authentication (see above) which are assigned to **one role and no more than one role**.  TSPs implementing the Open Telematics API must restrict authorization of requests to only those roles that are assigned in the **Access Controls** tables throughout this API specification. The tables will look like the following example:  |Role:  |Vehicle Query|Vehicle Follow|Driver Query|Driver Follow|Driver Dispatch|Driver Duty |HR          |Admin       | |-------|-------------|--------------|------------|-------------|---------------|------------|------------|------------| |Access:|`DENY/ALLOW` |`DENY/ALLOW`  |`DENY/ALLOW`|`DENY/ALLOW` |`DENY/ALLOW`   |`DENY/ALLOW`|`DENY/ALLOW`|`DENY/ALLOW`|  The intent of these access controls is so that carriers can limit which clients they deploy have access to:  * streaming *feeds* of objects as they are added to the TSP  * any Personally Identifiable Information (PII)  As can be seen in the **Access Controls** tables in the requests subsections of *References* that follow, the roles are assigned `DENY/ALLOW` such that:  * the *X Query* roles have access only to collections queries  * the *X Follow* roles have access to streaming feeds and queries  * the *Vehicle X* roles cannot access any PII  * the *Driver X* roles can access both vehicle info and PII  * the *Driver Dispatch* role is allowed to update route info and send messages to drivers  * the *Driver Duty* role is allowed to externaly trigger driver duty status (e.g. *Send Duty Status Changes to the TSP*)  * the *HR* role is allowed to update Driver information and TSP portal user accounts  # Security Requirements for Implementors  All TSPs that implement an Open Telematics API instance are expected to provide a secure service by default. In what follows we outline some security requirements that are expected in addition to the authentication and access control that is detailed in the sections above.  ## General Security Requirements  Vendors must maintain a vulnerability response and disclosure program in accordance with established standards such as International Organization of Standards (ISO)/International Electrotechnical Commission (IEC) 29147:2014 (Information technology \\-- Security techniques \\-- Vulnerability Disclosure) and ISO/IEC 30111:2013 (Information technology \\-- Security techniques \\-- Vulnerability Handling Processes).  Vendors should ensure their vulnerability response and disclosure program conforms with the [\'Legal bug bounty\' safe-harbor requirements](https://github.com/EdOverflow/legal-bug-bounty) to protect researchers and encourage the highest-quality participation.  ## Open Telematics API Server Security Requirements  **TLS Configuration**  The TLS security for Open Telematics API servers is of paramount importance. All of the confidentiality and integrity protections are relying on this layer. For this reason, Open Telematics API servers must ensure that their HTTPS / TLS configurations are of the highest quality. Following the [Qualys SSL Labs Guide](https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices) is reccomended.  The automated tool, also by Qualys SSL Labs, at [https://www.ssllabs.com/ssltest/](https://www.ssllabs.com/ssltest/) will report a \'letter grade\'; it is expected that TSPs will have letter grades of \'A\' or higher according to that tool.  **Whitelist HTTP Methods**  This API specification (in *APIBlueprint*) has a complete list of all allowable *HTTP methods* for each resource/\'end point\' of the Open Telematics API. Open Telematics server implementations should use the list of methods as a whitelist to filter incoming requests before any additional processing.  **Rate-limit API Requests**  Since every request to the Open Telematics API must be authenticated it is possible to rate-limit Open Telematics API requests per authenticated user. Vendors should implement rate limits on overall API requests per authenticated user, e.g. to avoid one user exhausting server resources of others; however, vendor must not rate-limit any Open Telematics API implementations to rates below what is offered through their other API services for telematics data. Rate-limiting response must be implemented using response 429 and headers as detailed in this document.  **Prevent Brute-Forcing**  Authentication (for this version of the API) is tied exclusively to HTTP Basic in each request. This means that each and every API endpoint is an opportunity to brute force any of the user credentials. Open Telematics server implementors must enforce a global rate-limit on authentication attempts for each user. Implementors may also want to consider other mitigations against brute-force attacks on credentials; c.f. [the OWA page on Blocking Brute Force Attacks](https://www.owasp.org/index.php/Blocking_Brute_Force_Attacks).  **Prevent Server-Error Stacktraces**  Open Telematics server implementors must ensure that their software is deployed such that it does not include stack traces in any response; e.g. no stacktraces in a 500 server error response.  **Prevent Resource Exhaustion by Slow-posting**  Open Telematics server implementors must ensure that, when receiving data from clients, the server implements short- enough timeouts such that exhaustion of the server resources through malicious client \'slow-posting\' is not possible. For more details, consult this [Qualys blog post](https://blog.qualys.com/securitylabs/2011/11/02/how-to-protect- against-slow-http-attacks).  **Input Sanitization**  Open Telematics server implementors must employ input sanitization when ingesting any data, i.e. for the `POST`, `PUT`, `PATCH` methods. This API uses exclusively JSON for data serialization; therefore, at a minimum all input data should be verified as valid JSON before being further processed. Furthermore, this specification includes generated JSON schema for the expected inputs and so additional verification that the input JSON conforms to the expected schema can also be performed before further processing is performed.  ## Open Telematics API Client Security Requirements  **Certificate Pinning**  Because the confidentiality of credentials is only protected by TLS in this version, it is very important that all Open Telematics API clients must be configured such that substitution of any TLS certificates results in a failure to establish any connections to the Open Telematics API server.  All clients must implement certificate pinning. i.e. All client implementations will pass the tests, 5.4-5.6, for certificate pinning in the [OWASP MASVS](https://www.owasp.org/index.php/OWASP_Mobile_Security_Testing_Guide).  # Working With Dates  When exchanging dates as parameters to API methods or in responses from the API, you must ensure that they are formatted properly as an ISO 8601 string (format `yyyy-MM-ddTHH:mm:ss.fffZ`). In addition, all dates will have to first be converted to UTC in order to ensure time zone information and daylight savings times are accounted for correctly.  # Working with Time-Based Queries  There are many API endpoints which support searches of data based on a time range. In all cases, the time range specified by a pair of `start` and `stop` parameters represents an inclusive-exclusive time range. i.e. a time period which includes the moment in time given by `start` and all times up-to but not including the moment in time given by `stop.`  The matching performed in all of these searches will be a time-intersection. i.e. the objects will be returned in search results if their associated time periods (however defined) have any intersection with the inclusive-exclusive time range given by the pair of `start` and `stop` parameters.  Objects may have multiple time periods associated with them; e.g. events recorded and transmitted by TSPs may have the times at which the event was created, when it was recorded and/or when it was made available by the TSP to the motor freight carrier. Unless otherwise specified, the time period of objects against which matching is performed will be the *creation times*. Furthermore, implementors are required to ensure that the creation times of any objects are preserved through all data transfers, i.e. that the creation times are not modified after initial recording at the telematics devices in the field.  In the special case of matching against an object with a single time field, *instantaneous events* the object will be returned if its instantaneous time value is within the inclusive-exclusive time range given by the pair of `start` and `stop` parameters.  # Working With Locations  When exchanging locations as parameters to API methods or in responses from the API, you must ensure that they are formatted as a latitude+longitude pair (format `[-]aaa.aaaaaaa [-]ooo.ooooooo`). Positive in the first component, Latitude, indicates North (N) and East (E) in the second component, Longitude.  Note that all locations assigned to objects by the TSP in the OTAPI are done so on a best-effort basis. Different TSPs have different rates of location update, different accuracies and different means of mapping a previously known location into events after the known location (e.g. prediction vs. interpolation). This Open Telematics API draft does not make any specifications about how often, how accurate or any other statements about how geographic locations must be assigned to objects by the TSP.  # Working with *Feed Follow* Queries  There are endpoints of the API which are intended to be polled by clients so that new data (data newer than the previous query) is returned. Theses *Feed Follow* endpoints are intended to assist in real-time client applications.  In some cases, the clients require that no data is ever missed by following (polling the endpoint); however, due to the nature of telematics systems there can be a high latency between time of creation and time of delivery to the TSP. Hence there is a non-trivial cost associated with providing endpoints that can ensure that no data is missed in following. e.g. the *Follow a Feed of Log Events* endpoint below.  Unless stated otherwise, all *Feed Follow* endpoints will be such that no data is missed by following; including cases of very high latency between data creation and delivery. Special exceptions will be noted on the endpoints for the cases where the clients require that they have the newest information and are not concerned with ensuring that no data is missed.  # Error States  The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.  # Pagination  Where requests may return large collections and where the collections to be returned are presumed to be static the API will include support for pagination of requests. The scheme for pagination closely follows [the pagination scheme of github](https://developer.github.com/v3/#pagination).  Requests that are paginated will return 50 items by default. The `page` parameter can be used to access later pages; it defaults to the first page, page *1*. A custom number of items can be requested with the `count` parameter.  The total number of elements available is returned in the `X-Total-Count` response header.  # Server Performance  This API is intended to be integrated into motor freight carriers back end operations systems; therefore, there are performance requirements to be considered as well. The API has been modeled in terms of use cases by the motor freight carriers (see below). Each of these use cases can be considered to be executing concurrently in the motor freight carrier. This has important design implications. For example, if a motor freight carrier has 10,000 trucks and makes requests regarding their location once a minute this would imply 10,000 method invocations per minute with a relatively small return data point. Other methods such as vehicle histories will have larger return data sets and require more server side processing but would not be expected to be called with a high frequency. Given that it is not possible to understand how these methods might be used by motor freight carriers in a final implementation it is difficult to provide concrete performance metric requirements at this stage. Instead, implementors should consider this per-truck scaling and design accordingly. i.e. consider that fleets can have more than 100,000 trucks and that some API endpoints in this specification will be called rapidly (1 request per minute) whereas others will be called infrequently (1 request per day).  This specification does not go into implementation specific design decisions which are up to the individual TSPs since such decisions are heavily dependent on their architecture. It is, however, strongly recommended that the TSPs consider building-in performance features such as request queueing and request rate limiters to provide a stable and robust solution. It is also recommended that the TSPs provide information on the frequency of updates for data feed subscriptions such as the vehicle feed so the consumers can make appropriate design decisions.  # Response Size Limits  Considering the volume of data which will be generated by large fleets, there will be cases where pagination is not sufficient to limit the load on the TSP\'s OTAPI servers.  The TSPs implementing OTAPI may elect to return an error `413 Request Entity Too Large` when clients make queries which would yield a response which is deemed \'too large.\' The definition of \'too large\' is intentionally left open so that TSPs can configure different limits for the various endpoints and on a per-customer basis (based on e.g. tiers of service).  Client software must be prepare to receive error `413` and to react by reducing the size of the query or ceasing the query; client may not retry a request when receiving a `413` error. This draft lists the endpoints where clients must be prepared for `413` responses.  # Unknown Drivers  For the elements of Open Telematics API which are concerned with Driver log events, or other driver-associated data, there needs to be a concept of an \'unknown driver\'. Indeed this concept is part of the ELD mandate. In Open Telematics API objects: `driverID` references to the unknown driver is represented by `null`.  # Provider Identifiers  An important use case of the Open Telematics API by motor freight carriers is to run \'mixed fleets\' where there are more than one TSP\'s service integrated concurrently. In such a seployment we can imagine possible issues with duplicated data or conflicts.  To prepare a solution to these problems, this specification includes provisions to identify the source of all data by a \'Provider ID\'. Implementors are required to choose a unique identifier and assign it to all \'Provider ID\' fields in all data structures where it is included in this specification. We reccommend that TSPs use their domain (e.g. `api.provider.com`) which should be sufficiently unique; however, TSPs can elect to use whatever identifier they like but it should be 1) recognizable as associated with that TSP and 2) remain constant throughout the lifetime of the TSP\'s service.  # Extending This API  The Open Telematics API is intended to enable motor freight carriers to be able to substitute TSPs (either concurently or as fail-overs). This, of course, means that OTAPI must include only the most common elements of all the TSPs (so- called Lowest Common Denominator).  However, each TSP has their own special value-add and, in some cases, the motor freight carriers would rather have access to this special value-add via OTAPI rather than include parallel integrations with SDKs in their operations. Unique vehicle performance data is a good example of this, where it is more useful embedded with the other events in the TSP stream.  Thus, extensions to the API will be necessary and in preparation for this the data models specified in the current API have been left \'open\'. i.e. the addition of data fields to the definitions of the objects which are returned by OTAPI according to this specification will not cause validation errors by clients which are following the JSON schema in this specification.  Addition of fields to the objects must be done such that it is not possible for the new extension fields to collide with other extensions or with future versions of the API; therefore, all fields added as extensions must be prefixed with `x_providerid_` where `providerid` is the provider ID (see *Provider Identifiers* above for more details).  * Adding addional field/members to the data objects, when the data is needed by a motor freight carrier IS a valid extension to the OTAPI  * Adding additional possible values to enumerations IS NOT a valid extension to the OTAPI  * Adding additional endpoints/methods IS NOT a valid extension to the OTAPI  In cases where enumerations need to be changed and additional endpoints need to be added, this should be approached by changing the OTAPI upstream. Also, ideally, adding fields should also be done by suggesting changes upstream; in this case, an example roadmap of the process might look like: starting with a prefixed field in the TSP extensions then suggesting the useful fields for inclusion and review leading to a new field without a prefix.  # Localization  The Open Telematics API is ready to be used in locales other than the United States (English-speakers). To enable display and interpretation of data in languages other English (US, `en_US`) implementors may provide translations of the descriptions of the enumerated constants in the API.  The localization does not apply to units of measure. With the exception of velocities where units of `km/h` are used, the Open Telematics API will use SI units. Nor does the localization apply to arbitrary strings in data objects of the API such as messages for display in vehicles or comment fields.  Requests to the Translation `/i18n` endpoint (see below for more details) shall include the request header `Accept- Language: `. If no request header is present then `Accept-Language: en` will be assumed.  Open Telematics API implementors choose which languages they will support. If the `Accept-Language: ` request header specifies a language which is unsupported by the Open Telematics API instance, then a `406` (Not Acceptable) response will returned. Implementors must support `Accept-Language: en` and return a complete mapping -- a sample of which is provided below for convenience in the sample response to `GET /v1.0/i18n`.  # Telematics API Use Cases by Motor Freight Carriers  The Open Telematics API is envisioned to be complete enough that motor freight carriers can use these APIs instead of the proprietary TSP APIs -- while still connecting-to TSP-hosted servers and hence still using the same provider. In the interest of ensuring that the APIs are _useful_ to their intended users (motor freight carriers) we will capture -- and organize -- the API by these use cases. See the sections below for the API endpoints in those categories. For ease of reference, we summarize the use cases here:  ***Check Provider\'s State of Health***  Users of telematics that is highly integrated into their operations need assurances of the state of health of the Provider\'s services.  ***Data Export***  Motor freight carriers want to export all data from a TSP for a given time period. Where \'all data\' for the purposes of this specification is all the data specified here and does not include any other proprietary data structures designed and employed by the TSP. These data exports could be used by carriers to complete mandatory processes during times of TSP outage or for research purposes offline or to restore data -- although this last potential use is _not_ a use case we aim to support here please see below on \'data import.\'  ***Generate Records of Duty Status for Compliance***  Motor freight carriers use telematics systems to maintain Record of Duty Status (RODS) compliance. The TSP to the carrier will supply compliant records directly, without the need for the carrier to use the OTAPI. The carrier may use OTAPI for RODS in the event that compliant records need to be produced when a TSP is no longer available. i.e. as a backup process only; however, to do so will require processing and it is not expected that OTAPI data be ready for compliance as-is. A couple examples; the `line data check` and `file data check` values will need to be calculated after the creation of line and files in the process of creating RODS files for compliance; OTAPI will not include these values. Also note that preparing compliance reports is a value added by TSPs; e.g. in at least one case, the ordering used by regulators used truncated timestamps and the higher-resolution available in the TSP RODS information led to events being out-of-order in the view of the regulators without special handling by the TSP. This is an example of the kinds of nuances that are handled by TPSs in their service offering and OTAPI is not meant to replace that service.  ***Driver Availability***  Motor freight carriers need to understand the availability of their drivers -- within the current regulatory context of those drivers -- so that the carrier can ensure regulatory compliance and, more importantly, driver safety.  ***Driver Route & Directions Communication***  Motor freight carriers update their Driver\'s destination and route during their trip. This allows them to react to changing conditions in weather, the needs of regulatory restrictions on hours, optimizing follow-on activities after a trip, etc.  This feature is heavily used but also is commonly offered as an add-on to the TSP service from another party.  ***Driver Route & Directions Start***  Motor freight carriers plan destinations and routes for their drivers and inform the drivers of the plan via the in-cab components of a telematics system.  This feature is heavily used but also is commonly offered as an add-on to the TSP service from another party.  ***Driver Route and Directions Done***  Motor freight carriers receive notifications when Drivers have completed their trip.  This feature is heavily used but also is commonly offered as an add-on to the TSP service from another party.  ***Driver Messaging by Geo-Location***  Motor freight carriers use telematics systems to message their drivers for various reasons, not the least of which is to notify the drivers of dangerous weather conditions in their area.  ***Driver Messaging by Vehicle***  Motor freight carriers also message their drivers by sending messages directly to a vehicle.  ***Vehicle Location Time History Tracking***  Motor freight carriers use telematics fleet Location Time History for multiple \'fleet dynamics modeling\' use cases such as: Fuel Purchase Prediction, Fuel Consumption Performance Tracking, and Fleet Maintenance Planning.  ***Human Resources Process: Payroll***  Motor freight carriers use telematics systems to assist in payroll processing. This enables efficiencies at scale that are important to modern motor freight carrier operations.  ***Human Resources Process: Accident Report***  Motor freight carriers use telematics systems to monitor their fleets for accidents.  ***Carrier Custom Business Intelligence***  Motor freight carriers use telematics systems for multiple, custom, business intelligence purposes where the overall health of their fleet is considered and fed into their own proprietary models.  ***Compliance and Safety Monitoring***  Motor freight carriers use telematics systems to monitor compliance and safety for their operations.  ***In-Field Maintenance & Repair***  Motor freight carriers use telematics systems to plan (and react to) maintenance needs of their fleets.',
    long_description=long_description,
    author='Urban Jonson',
    author_email='urban.jonson@nmfta.org',
    url='https://github.com/nmfta-repo/nmfta-opentelematics-api',
    packages=find_packages(),
    install_requires=[
        'requests>=2.9.1, <3.0',
        'jsonpickle>=0.7.1, <1.2',
        'cachecontrol>=0.11.7, <1.0',
        'python-dateutil>=2.5.3, <3.0'
    ],
    tests_require=[
        'nose>=1.3.7'
    ],
    test_suite = 'nose.collector'
)